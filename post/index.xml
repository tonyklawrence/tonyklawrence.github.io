<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tony Lawrence</title>
    <link>http://tonylawrence.com/post/index.xml</link>
    <description>Recent content in Posts on Tony Lawrence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tonyklawrence&#34;&gt;Tony Lawrence&lt;/a&gt; 2017 - Waffly Bollocks</copyright>
    <lastBuildDate>Sat, 04 Feb 2017 16:45:28 +0000</lastBuildDate>
    <atom:link href="http://tonylawrence.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Freeing up port 80 on Synology DSM</title>
      <link>http://tonylawrence.com/post/unix/synology/freeing-port-80/</link>
      <pubDate>Sat, 04 Feb 2017 16:45:28 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/unix/synology/freeing-port-80/</guid>
      <description>

&lt;p&gt;I recently purchased a new NAS for my home network.  My reliable ReadyNAS has been working flawlessly for the past 6 years and still going strong (if a little slow).  As I really wanted a NAS that would support docker containers I was drawn to the DS916+.&lt;/p&gt;

&lt;p&gt;So far everything has been easy to configure, launching docker containers a breeze and has generally been a great experience; apart from 1 little thing.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/synology/synology-ds916&amp;#43;.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;i-want-port-80-back-please&#34;&gt;I want port 80 back please&lt;/h3&gt;

&lt;p&gt;If you are reading this post you probably already know that even though Synology DSM (disk station manager) by default uses ports &lt;code&gt;5000&lt;/code&gt; (http) and &lt;code&gt;5001&lt;/code&gt; (https) it still steals port &lt;code&gt;80&lt;/code&gt; for it&amp;rsquo;s redirecting using Nginx.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DSM ports can be changed (and is advisable) via the web UI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, after many searches and failures I&amp;rsquo;ve come up with a solution that will free up port &lt;code&gt;80&lt;/code&gt; for your own uses and does not destroy your Synology.  I&amp;rsquo;m not going to lie, you will need to &lt;code&gt;ssh&lt;/code&gt; into your Synology, change a few system files and even maybe pray to your favourite gods, but in the end I hope you can sit back, smile and feel rewarded that you have gained back the power of port &lt;code&gt;80&lt;/code&gt; from DSM.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just a small note, the reason I wanted port &lt;code&gt;80&lt;/code&gt; for myself is that I run &lt;a href=&#34;https://github.com/diginc/docker-pi-hole&#34;&gt;Pi-Hole&lt;/a&gt; as one of my docker containers and as it&amp;rsquo;s providing ad blocking via DNS then it needed to receive requests on port &lt;code&gt;80&lt;/code&gt; to provide empty content to replace those annoying adverts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;releasing-port-80&#34;&gt;Releasing port 80&lt;/h2&gt;

&lt;p&gt;First things to know is that all the configuration files for Nginx (the web sever DSM uses) are automatically created on every change via the UI.  So if you modify them directly, next time you switch something in the UI you changes are lost.  Damn! That’s not good.  How can we stop this from happening.&lt;/p&gt;

&lt;p&gt;Maybe if we change the source templates that are used by DSM to build the files it will then apply our changes every time.  I like the sound of that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I’ve done this on DSM 6.0 update 9.  I don’t know if I will need to re-apply this change next time I update, only time will tell.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, I’ve led you down this little route, the anticipation building and I hear you shouting “Where are these magical files?”.  Ok, I wont keep you in suspense any longer.  The files that we will be changing can be found under &lt;code&gt;/usr/syno/share/nginx&lt;/code&gt; and are named:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server.mustache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DSM.mustache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WWWService.mustache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://mustache.github.io/&#34;&gt;Mustache&lt;/a&gt; is a simple template language.  Don’t worry, we don’t really need to understand this to do what we need to do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if you open one of the files in your favourite editor you will find a server configuration looking something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server {
    listen 80 default_server{{#reuseport}} reuseport{{/reuseport}};
    listen [::]:80 default_server{{#reuseport}} reuseport{{/reuseport}};
    listen 443 default_server ssl{{#reuseport}} reuseport{{/reuseport}};
    listen [::]:443 default_server ssl{{#reuseport}} reuseport{{/reuseport}};

    server_name _;

    {{&amp;gt; /usr/syno/share/nginx/X-Accel}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The headings here are listing the default secure (&lt;code&gt;443&lt;/code&gt;) and insecure (&lt;code&gt;80&lt;/code&gt;) ports used to listen on.  It’s as easy as replacing the port &lt;code&gt;80&lt;/code&gt; with what you would like.  I’ve used port &lt;code&gt;81&lt;/code&gt; however &lt;code&gt;8080&lt;/code&gt; is also a good option.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server {
    listen 81 default_server{{#reuseport}} reuseport{{/reuseport}};
    listen [::]:81 default_server{{#reuseport}} reuseport{{/reuseport}};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make this change in all 3 files replacing occurrences of &lt;code&gt;80&lt;/code&gt; with your chosen port.  Now what we have done here is changed the template used to generate the Nginx configuration files, not the configuration files themselves.  So we now need to force a rebuild of these.  There is probably a terminal command to do this but I have not yet found this out.  What you can do is change any of the settings from the control panel UI and save.  This will trigger the rebuild and restart of the web server.  You can always change back the setting afterwards.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/synology/control-panel.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Congratulations, you have now freed port &lt;code&gt;80&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don’t forget, if you were accessing DSM via port &lt;code&gt;80&lt;/code&gt; then you will have to update the URL with your new chosen port.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;forwarding-port-80-to-your-docker-container&#34;&gt;Forwarding port 80 to your docker container&lt;/h2&gt;

&lt;p&gt;So now that you have port &lt;code&gt;80&lt;/code&gt; to do with what you want, let’s set this up to forward all requests to a docker container.  We can do this using the reverse proxy tab in the ‘Application Portal’ section.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/synology/reverse-proxy.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;What I have defined above is a rule that all traffic that going to my Synology on port &lt;code&gt;80&lt;/code&gt; will be forwarded onto port &lt;code&gt;8080&lt;/code&gt;.  This port &lt;code&gt;8080&lt;/code&gt; is then mapped in docker to my pi-hole containers port &lt;code&gt;80&lt;/code&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/synology/reverse-proxy-rules.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;blockquote&gt;
&lt;p&gt;You may think it odd that I go from port &lt;code&gt;80&lt;/code&gt; to &lt;code&gt;8080&lt;/code&gt; and then back to &lt;code&gt;80&lt;/code&gt;.  The reason for this is that the docker UI will not allow me to use port &lt;code&gt;80&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately it isn’t quite that simple.  You see, Synology really do not want you using port &lt;code&gt;80&lt;/code&gt; so they do not allow you to choose this in the UI.&lt;/p&gt;

&lt;p&gt;So, the second “hack” we need to do is fix this.  How I did this is by creating the rule above but with a different port &lt;code&gt;12345&lt;/code&gt; and then manually updating the configuration file in a similar vane to above.  The file in question is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/syno/etc/www/ReverseProxy.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This file is just a json file, unfortunately is has no formatting at all so it’s not the easiest file to read.  Here is mine (formatted so you can read it) and you can see that it shows port &lt;code&gt;12345&lt;/code&gt; in the front end section.  We can now change this to be &lt;code&gt;80&lt;/code&gt; and save the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;64e6f8f3-6161-4e05-801b-ddb02016a166&amp;quot; : {
    &amp;quot;backend&amp;quot; : {
      &amp;quot;fqdn&amp;quot; : &amp;quot;localhost&amp;quot;,
      &amp;quot;port&amp;quot; : 8080,
      &amp;quot;protocol&amp;quot; : 0
    },
    &amp;quot;description&amp;quot; : &amp;quot;Ad Block&amp;quot;,
    &amp;quot;frontend&amp;quot; : {
      &amp;quot;fqdn&amp;quot; : null,
      &amp;quot;https&amp;quot; : null,
      &amp;quot;port&amp;quot; : 12345,
      &amp;quot;protocol&amp;quot; : 0
    }
  },
  &amp;quot;version&amp;quot; : 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have more reverse proxy rules then this file will be much larger&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next time your Nginx files are regenerated (any change to web settings) the new port number &lt;code&gt;80&lt;/code&gt; will appear in the rules rather than &lt;code&gt;12345&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;one-more-thing&#34;&gt;One more thing&lt;/h2&gt;

&lt;p&gt;This is just for the security conscious.  If you run security advisor regularly and have it to check for modified files, you will see the following warning.  Don’t worry, it’s not wrong as we have modified this file.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/synology/security-warning.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;You can disable this check in the applications properties but I would strongly recommend that you don’t.  For me I just ignore this warning.&lt;/p&gt;

&lt;h3 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;I hope you find this useful, I decided to document this a I did not find any solutions on the internet about this.  I’m not suggesting this is the only way, or even that it doesn’t come with any drawbacks, but it’s currently working for me and has solved a nice problem.&lt;/p&gt;

&lt;p&gt;If this works for you or you even know a better way, please leave a comment below.&lt;/p&gt;

&lt;p&gt;Lastly, if you are editing system files please take care.  I don’t want to be responsible for anybody losing important data or having to reset their disk station.  If you are not sure what you are doing then please seek advice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring your Haskell environment</title>
      <link>http://tonylawrence.com/post/haskell/configure/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/haskell/configure/</guid>
      <description>

&lt;p&gt;My love of functional programming has been getting stronger over the past year so I decided to attend &lt;a href=&#34;http://www.well-typed.com/&#34;&gt;Well-Typed&lt;/a&gt; Haskell courses at Skills Matters&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:wt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:wt&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.  As I&amp;rsquo;m a huge fan of JetBrains &lt;a href=&#34;http://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt; IDE I found using Haskell a little lacking in this area (unless you can be online with &lt;a href=&#34;http://www.fpcomplete.com/&#34;&gt;FP Complete&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;In this article I will explain how I configured my Haskell development environment using Sublime Text 3 and a few extras.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;installing-haskell-via-homebrew-brew&#34;&gt;Installing Haskell (via Homebrew&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:brew&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:brew&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;)&lt;/h2&gt;

&lt;p&gt;If you need to, take a look at my post on how to &lt;a href=&#34;http://tonylawrence.com/2013/12/31/installing-homebrew-on-osx-mavericks/&#34;&gt;Install Homebrew&lt;/a&gt;.  It&amp;rsquo;s not actually very hard at all.&lt;/p&gt;

&lt;p&gt;Once you have Homebrew up and running it&amp;rsquo;s very simple to install Haskell (although it might take a while to complete.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install haskell-platform
==&amp;gt; Installing dependencies for haskell-platform: apple-gcc42,,ghc
==&amp;gt; Installing haskell-platform dependency: apple-gcc42
==&amp;gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/apple-gcc42
######################################################################## 100.0%
==&amp;gt; Pouring apple-gcc42-4.2.1-5666.3.mavericks.bottle.2.tar.gz
==&amp;gt; Summary
  /usr/local/Cellar/apple-gcc42/4.2.1-5666.3: 104 files, 75M
==&amp;gt; Installing haskell-platform dependency: ghc
==&amp;gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/ghc-7.6.3.m
######################################################################## 100.0%
==&amp;gt; Pouring ghc-7.6.3.mavericks.bottle.2.tar.gz
==&amp;gt; Caveats
This brew is for GHC only; you might also be interested in haskell-platform.
==&amp;gt; Summary
  /usr/local/Cellar/ghc/7.6.3: 5286 files, 776M
==&amp;gt; Installing haskell-platform
==&amp;gt; Downloading http://lambda.haskell.org/platform/download/2013.2.0.0/haskell-p
######################################################################## 100.0%
==&amp;gt; ./configure --prefix=/usr/local/Cellar/haskell-platform/2013.2.0.0
==&amp;gt; make install
==&amp;gt; Caveats
Run `cabal update` to initialize the package list.

If you are replacing a previous version of haskell-platform, you may want 
to unregister packages belonging to the old version. You can find broken
packages using:
  ghc-pkg check --simple-output
You can uninstall them using:
  ghc-pkg check --simple-output | xargs -n 1 ghc-pkg unregister --force
==&amp;gt; Summary
  /usr/local/Cellar/haskell-platform/2013.2.0.0: 1463 files, 232M, built in 24.5 minutes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As requested I also run &lt;code&gt;cabal update&lt;/code&gt; to initialise the package list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cabal update
Config file path source is default config file.
Config file /Users/tony/.cabal/config not found.
Writing default configuration to /Users/tony/.cabal/config
Downloading the latest package list from hackage.haskell.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then check that it&amp;rsquo;s all working correctly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ghci
GHCi, version 7.6.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude&amp;gt; 2+2
4
Prelude&amp;gt; :t 4
4 :: Num a =&amp;gt; a
Prelude&amp;gt; 
Leaving GHCi.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-sublime-text-3&#34;&gt;Installing Sublime Text 3&lt;/h2&gt;

&lt;p&gt;Sublime Text 3 is currently still in beta.  I have been using it for a while and have not come across any problems which is why I can highly recommend giving it a go.  It can be downloaded from &lt;a href=&#34;http://www.sublimetext.com/3&#34;&gt;http://www.sublimetext.com/3&lt;/a&gt;.  Once downloaded, open the DMG file and copy to your Applications folder.  On starting you will be greeted with the following:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/haskell/sublime-text-3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;If you like sublime please purchase a license to allow the developers to keep supporting this great application&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:buy&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:buy&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configuring-sublime-text-for-haskell&#34;&gt;Configuring Sublime Text for Haskell&lt;/h2&gt;

&lt;p&gt;To allow us to fully use the power of Sublime Text we need to install Package Control.  This will allow us to use the Haskell package later.  Full instructions on installation can be found on the &lt;a href=&#34;http://sublime.wbond.net/installation&#34;&gt;Package Control Site&lt;/a&gt;.  A quick overview follows.&lt;/p&gt;

&lt;h3 id=&#34;installing-the-package-control&#34;&gt;Installing the Package Control&lt;/h3&gt;

&lt;p&gt;Whilst in Sublime Text type &lt;code&gt;ctrl+`&lt;/code&gt; to open up the console and paste the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output in the console will probably look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;reloading plugin Package Control.Package Control
found 2 files for base name Main.sublime-menu
Package Control: No updated packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want to trust the script you can follow the manual instructions on the package control website.&lt;/p&gt;

&lt;h3 id=&#34;installing-sublimehaskell-package&#34;&gt;Installing SublimeHaskell Package&lt;/h3&gt;

&lt;p&gt;SublimeHaskell&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sublimehaskell&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:sublimehaskell&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; is a github hosted project which adds support for many things.  I mainly use it to auto-compile the edited file on save and easily running a Haskell program from the editor.  Full instructions are available at the &lt;a href=&#34;http://github.com/SublimeHaskell/SublimeHaskell&#34;&gt;SublimeHaskell&lt;/a&gt; project site.  Below I will show how I got everything working.&lt;/p&gt;

&lt;p&gt;There are a few packages that need to be installed for this package to work.  Using &lt;code&gt;cabal&lt;/code&gt; makes this easy (although it might take a while.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cabal install aeson haskell-src-exts haddock hdevtools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, to install the package in Sublime Text 3 you can type &lt;code&gt;cmd-shift-P&lt;/code&gt; to open up the search window.  Type in &lt;code&gt;install&lt;/code&gt; to locate the install package option and select it.  You should see  in the status bar that it is going to the repository to find available packages.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/haskell/install-package.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Next type in &lt;code&gt;haskell&lt;/code&gt; to locate the SublimeHaskell package and select it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/haskell/install-sublimehaskell.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The status bar should indicate that it is installing the package and when it is completed.  Lastly we need to configure the package to use hdevtools as this isn&amp;rsquo;t the default behaviour.&lt;/p&gt;

&lt;p&gt;From the menu choose &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Package Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;SublimeHaskell&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings - User&lt;/code&gt; to open up the user settings.  Now paste the following into that file and save making sure you replace &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with your username.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;enable_ghc_mod&amp;quot;: false,
  &amp;quot;enable_hdevtools&amp;quot;: true,
  &amp;quot;add_to_PATH&amp;quot;: [ &amp;quot;/Users/&amp;lt;username&amp;gt;/.cabal/bin&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A restart is then required.&lt;/p&gt;

&lt;p&gt;You can now enter your Haskell code into Sublime Text, make sure you have the Haskell build system selected and then type &lt;code&gt;cmd-B&lt;/code&gt; to save, build and execute the code!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/haskell/haskell-program.png&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:wt&#34;&gt;&lt;a href=&#34;http://skillsmatter.com/course/scala/well-typed-advanced-haskell&#34;&gt;Well-Typed Advanced Haskell by Andres Löh&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:wt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:brew&#34;&gt;&lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:brew&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:buy&#34;&gt;&lt;a href=&#34;https://www.sublimetext.com/buy&#34;&gt;Support Sublime Text&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:buy&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sublimehaskell&#34;&gt;&lt;a href=&#34;http://github.com/SublimeHaskell/SublimeHaskell&#34;&gt;SublimeHaskell GitHub hosted project&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sublimehaskell&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Installing Homebrew on OSX Mavericks</title>
      <link>http://tonylawrence.com/post/unix/installing-homebrew/</link>
      <pubDate>Tue, 31 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/unix/installing-homebrew/</guid>
      <description>&lt;p&gt;I choose to install all my applications via &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;.  It&amp;rsquo;s easy to install, easy to update, works well for me and has all the required packages including everything required for Haskell.  Installing Homebrew is as easy as running the following command in terminal[^brew]:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- more --&gt;

&lt;p&gt;You will be required to enter your administrator password and might be asked to install Apples Xcode developer tools and also Git versioning tool.  This is easy in Mavericks as the UI will prompt you for any requirements.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/install-xcode.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/install-git.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/download-homebrew.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/install-homebrew.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/homebrew-installed.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;After all the requirements are met and everything is downloaded and installed you will be requested to run &lt;code&gt;brew doctor&lt;/code&gt; to complete the installation, you should see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;==&amp;gt; Installation successful!
You should run `brew doctor&#39; *before* you install anything.
Now type: brew help
$ brew doctor
Your system is ready to brew.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information visit the Homebrew wiki: &lt;a href=&#34;http://github.com/Homebrew/homebrew/wiki&#34;&gt;http://github.com/Homebrew/homebrew/wiki&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Backing up and restoring a ReadyNAS Ultra</title>
      <link>http://tonylawrence.com/post/unix/backing-up-readynas/</link>
      <pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/unix/backing-up-readynas/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve had my ReadyNAS drop of the network a couple of times, and lately has been warning me about errors on my disk 2 so I thought it was a good idea to replace that drive.  Due to the few network issues I&amp;rsquo;ve had I decided that taking the opportunity to restore the ReadyNAS was a good idea (I had messed with it quite a bit before.)&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;As I have just under 3TB used my new replacement drive would be 3TB so that I could use it for backup / restore and then as a replacement to the failing 2TB drive.&lt;/p&gt;

&lt;h2 id=&#34;initialising-the-3tb-drive-for-use&#34;&gt;Initialising the 3TB drive for use&lt;/h2&gt;

&lt;p&gt;My first big headache was that the ReadyNAS would not recognise the new drive (in an icebox usb enclosure) as 3TB and would only format it to be around 800MB, this was no use.  Also, from my Mac using Disk Utility I could create a 3TB partition but unable to format it to be ext3.  So I had to use my ReadyNAS bash skills.&lt;/p&gt;

&lt;p&gt;Firstly I found out that &lt;code&gt;fdisk&lt;/code&gt; does not support drives over 2TB so after much annoyance I gave up.  Apparently the solution is to use &lt;code&gt;parted&lt;/code&gt; which does not come on the ReadyNAS.  However, a quick &lt;code&gt;apt-get&lt;/code&gt; later and I&amp;rsquo;m away (I didn&amp;rsquo;t care about installing stuff as I was going to restore.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-get install parted
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parted&#34;&gt;Parted&lt;/h2&gt;

&lt;p&gt;I followed Vivek Gites excellent guide here: &lt;a href=&#34;http://www.cyberciti.biz/tips/fdisk-unable-to-create-partition-greater-2tb.html&#34;&gt;http://www.cyberciti.biz/tips/fdisk-unable-to-create-partition-greater-2tb.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted a 3TB primary partition, this was to make the most of the drive.  My USB drive was available as /dev/sde.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ parted /dev/sde
GNU Parted 1.7.1
Using /dev/sde
Welcome to GNU Parted! Type &#39;help&#39; to view a list of commands.
(parted)                                           
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create the partition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(parted) mklabel gpt
(parted) unit TB
(parted) mkpart primary 0.00TB 3.00TB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check everything is ok using the &lt;code&gt;print&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(parted) print

Disk /dev/sde: 3001GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt

Number  Start   End     Size    File system  Name     Flags
 1      17.4kB  3001GB  3001GB  ext3         primary       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To exit simple type&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(parted) quit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can format the partition as &lt;code&gt;ext3&lt;/code&gt; (you can use &lt;code&gt;ext4&lt;/code&gt; if you prefer)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkfs.ext3 /dev/sde1 # for ext3
$ mkfs.ext4 /dev/sde1 # for ext4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;doing-the-backup&#34;&gt;Doing the backup&lt;/h2&gt;

&lt;p&gt;I decided that the easiest way to backup was to use &lt;code&gt;rsync&lt;/code&gt;.  This would allow me to do small chunks at a time and also selectively restore.  I was surprised that to backup around 3TB of data (using USB and Green 5400rpm drives) took most of a weekend! (at least I could monitor the progress with the &lt;code&gt;rsync&lt;/code&gt; output and &lt;code&gt;df -h&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;For reference, I used the following command line&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rsync --progress --recursive --times --perms --human-readable &amp;lt;source&amp;gt; &amp;lt;destination&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-factory-restore&#34;&gt;The factory restore&lt;/h2&gt;

&lt;p&gt;There was two options I had when resetting my ReadyNAS firmware.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OS Re-Install - reinstalls the firmware from the internal flash to the disks&lt;/li&gt;
&lt;li&gt;Factory Default - resets the unit to factory settings, erases all data, resets all defaults, and reformats the disk to X-RAID2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I had installed things I shouldn&amp;rsquo;t the re-install would not remove this mess.  I thought if I&amp;rsquo;m going to do it, I might as well clean it properly (it does mean I need to setup my add-ons again.)&lt;/p&gt;

&lt;h2 id=&#34;doing-the-restore&#34;&gt;Doing the restore&lt;/h2&gt;

&lt;p&gt;NetGear has a nice page for reference on how to enter the boot menu and what the options mean. &lt;a href=&#34;http://www.readynas.com/kb/faq/boot/how_do_i_use_the_boot_menu&#34;&gt;How do I use the Boot Menu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For my ReadyNAS Ultra 4 I had to do the following to access the boot menu:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Power off the unit.&lt;/li&gt;
&lt;li&gt;Using a straightened paper clip, press and hold the Reset button.&lt;/li&gt;
&lt;li&gt;Press the Power button to power on the unit.&lt;/li&gt;
&lt;li&gt;Continue to press the Reset button until the status display screen shows an boot menu message.&lt;/li&gt;
&lt;li&gt;Press the Backup button to scroll through the boot mode options.&lt;/li&gt;
&lt;li&gt;Press and release Reset button to confirm your boot menu selection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then wait…&lt;/p&gt;

&lt;h2 id=&#34;installing-services&#34;&gt;Installing services&lt;/h2&gt;

&lt;h3 id=&#34;enabling-ssh&#34;&gt;Enabling SSH&lt;/h3&gt;

&lt;p&gt;First thing is to download and install the SSH access plugin.  This is done the same way as any add-on.  Once this has been installed we can &lt;code&gt;ssh&lt;/code&gt; into the ReadyNAS and configure other things.  You can use the same username / password of any user you have created.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A restart is required before you can log in&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;transmission&#34;&gt;Transmission&lt;/h3&gt;

&lt;p&gt;Download and install the Transmission add-on from the ReadyNAS community forums.  Once installed you will see it available in your add-ons tab.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Transmission will not start until you have set the &lt;code&gt;download-dir&lt;/code&gt; in &lt;code&gt;settings.json&lt;/code&gt; to a valid location&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;automatic&#34;&gt;Automatic&lt;/h3&gt;

&lt;p&gt;Just like Transmission, download and install from the ReadyNAS comment forums and install in the same way.&lt;/p&gt;

&lt;h2 id=&#34;customisation&#34;&gt;Customisation&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t want Mac OS X to write network stores then issue the following command on each Mac OS X client.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ defaults write com.apple.desktopservices DSDontWriteNetworkStores true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;email&#34;&gt;Email&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-get install courier-imap-ssl courier-maildrop courier-doc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can test with &lt;code&gt;telnet localhost 143&lt;/code&gt; to see if you can connect, you should expect a response like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;* OK [CAPABILITY IMAP4rev1 UIDPLUS CHILDREN NAMESPACE THREAD=ORDEREDSUBJECT THREAD=REFERENCE SORT QUOTA IDLE ACL ACL2=UNION]
Courier-IMAP ready. Copyright 1998-2005 Double Precision, Inc. See COPYING for distribution information.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a user, location for email and then testing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;userdb tonylawrence.com set uid=1004 gid=50 home=/c/email mail=tonylawrence.com
userdbpw -md5 | userdb tonylawrence.com set imappw
makeuserdb
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;host:/c/email# mkdir tonylawrence.com
host:/c/email# chown tony:staff tonylawrence.com/
host:/c/email# chmod 755 tonylawrence.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ telnet localhost 143
01 LOGIN &amp;lt;user&amp;gt; &amp;lt;password&amp;gt;
01 OK LOGIN Ok.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install fetch mail and mail drop to fetch and move email into our new home.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-get install fetchmail courier-maildrop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mail Filter is used to place different emails into different locations.  Here I move any email to &lt;code&gt;tonylawrence.com&lt;/code&gt; into a different folder &lt;code&gt;~/.mailfilter&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DEFAULT=&amp;quot;/c/email&amp;quot;
TL=&amp;quot;$DEFAULT/tonylawrence.com/&amp;quot;

if (/^(To|Cc|Bcc):.*@tonylawrence.com/) {
  to $TL
}

to $DEFAULT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fetchmail configuration to pull email from google mail &lt;code&gt;.fetchmailrc&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set invisible
set bouncemail

poll &amp;quot;imap.gmail.com&amp;quot; protocol imap
  username &amp;quot;&amp;lt;user@gmail.com&amp;gt;&amp;quot;
  password &amp;quot;&amp;lt;password&amp;gt;&amp;quot;
  keep
  ssl
  mda &amp;quot;/usr/bin/maildrop -d &amp;lt;user&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then automate the fetching via cron&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export EDITOR=vi
$ crontab -e

m h  dom mon dow   command
*/2 * * * * fetchmail --pidfile /tmp/fetchmail.pid
#*/5 * * * * fetchmail &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;avahi-icons&#34;&gt;Avahi icons&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /etc/avahi/services/
$ cat afp.service 
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&#39;no&#39;?&amp;gt;&amp;lt;!--*-nxml-*--&amp;gt;
&amp;lt;service-group&amp;gt;
  &amp;lt;name replace-wildcards=&amp;quot;yes&amp;quot;&amp;gt;%h&amp;lt;/name&amp;gt;
  &amp;lt;service&amp;gt;
    &amp;lt;type&amp;gt;_afpovertcp._tcp&amp;lt;/type&amp;gt;
    &amp;lt;port&amp;gt;548&amp;lt;/port&amp;gt;
  &amp;lt;/service&amp;gt;
  &amp;lt;service&amp;gt;
    &amp;lt;type&amp;gt;_device-info._tcp&amp;lt;/type&amp;gt;
    &amp;lt;port&amp;gt;0&amp;lt;/port&amp;gt;
    &amp;lt;txt-record&amp;gt;model=Macmini&amp;lt;/txt-record&amp;gt;
  &amp;lt;/service&amp;gt;
&amp;lt;/service-group&amp;gt;
Patrician:/etc/avahi/services# cat timemachine.service 
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&#39;no&#39;?&amp;gt;&amp;lt;!--*-nxml-*--&amp;gt;
&amp;lt;service-group&amp;gt;
  &amp;lt;name replace-wildcards=&amp;quot;yes&amp;quot;&amp;gt;Time Machine&amp;lt;/name&amp;gt;
  &amp;lt;service&amp;gt;
    &amp;lt;type&amp;gt;_adisk._tcp&amp;lt;/type&amp;gt;
    &amp;lt;port&amp;gt;9&amp;lt;/port&amp;gt;
    &amp;lt;txt-record&amp;gt;sys=waMA=00:22:3F:AA:2C:E1,adVF=0x100&amp;lt;/txt-record&amp;gt;
    &amp;lt;txt-record&amp;gt;dk0=adVF=0xa1,adVN=ReadyNAS,adVU=29d6becd-d614-4346-aa51-bb2f0c8fcbb2&amp;lt;/txt-record&amp;gt;
  &amp;lt;/service&amp;gt;
  &amp;lt;service&amp;gt;
    &amp;lt;type&amp;gt;_device-info._tcp&amp;lt;/type&amp;gt;
    &amp;lt;port&amp;gt;0&amp;lt;/port&amp;gt;
    &amp;lt;txt-record&amp;gt;model=TimeCapsule&amp;lt;/txt-record&amp;gt;
  &amp;lt;/service&amp;gt;
&amp;lt;/service-group&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Had to chown admin:admin on /etc/cron.d otherwise couldn&amp;rsquo;t create backups!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.readynas.com/?p=4203&#34;&gt;Root Access SSH&lt;/a&gt;
&lt;a href=&#34;http://www.readynas.com/forum/viewtopic.php?f=48&amp;amp;t=41667&#34;&gt;Automatic&lt;/a&gt;
&lt;a href=&#34;http://www.readynas.com/forum/viewtopic.php?f=48&amp;amp;t=24272&#34;&gt;Transmission&lt;/a&gt;
&lt;a href=&#34;http://www.courier-mta.org/imap&#34;&gt;Courier IMAP&lt;/a&gt;
&lt;a href=&#34;http://www.courier-mta.org/maildrop&#34;&gt;Courier MailDrop&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grouping collections in Java</title>
      <link>http://tonylawrence.com/post/java/grouping-collections/</link>
      <pubDate>Wed, 15 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/grouping-collections/</guid>
      <description>

&lt;p&gt;Recently I came across some code that was iterating over collections in order to group them by certain fields.  This code was repeated a few times as it was grouping more than once.  To me this seemed very verbose and a little hard to understand.  As Guava was the available library and one that does not include any grouping I decided to have a go myself.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;the-iterative-approach&#34;&gt;The iterative approach&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Map&amp;lt;Character, List&amp;lt;String&amp;gt;&amp;gt; group = newHashMap();
List&amp;lt;String&amp;gt; strings = asList(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;);

for (String string : strings) {
    Character firstCharacter = string.charAt(0);
    
    if (group.containsKey(firstCharacter)) {
        group.get(firstCharacter).add(string);
    } else {
        group.put(firstCharacter, asList(string));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-idea&#34;&gt;The idea&lt;/h2&gt;

&lt;p&gt;Some functional languages do allow you to group items based upon a field such as the group by in Scala.  Here&amp;rsquo;s a quick example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;val strings = &amp;quot;one&amp;quot; :: &amp;quot;two&amp;quot; :: &amp;quot;three&amp;quot; :: Nil
val groups = strings groupBy (_.charAt(0))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-specification&#34;&gt;The specification&lt;/h2&gt;

&lt;p&gt;To design the grouping I drove this from how I wanted to use it.  The simplest way to do this is from a test.  This allows me to flesh out the design as well as prove it works (and also to know when I am done.)  Simple JUnit tests will suffice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m using enumerable-java to reduce noise in my Java code (see &lt;a href=&#34;http://tonylawrence.com/2012/01/10/lambda-magic/&#34;&gt;Lambda Magic?&lt;/a&gt;) along with this λ trick for Guava&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@NewLambda
private static &amp;lt;F, T&amp;gt; Function&amp;lt;F, T&amp;gt; λ(F from, T to) {
    throw new LambdaWeavingNotEnabledException();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a method named &lt;code&gt;λ&lt;/code&gt; which can be used as a lambda function with guava as the default enumerable implementation returns a &lt;code&gt;Callable&lt;/code&gt; for &lt;a href=&#34;https://github.com/bodar/totallylazy&#34;&gt;Totally Lazy&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-test&#34;&gt;The Test&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Test
public void groupAListOfStrings_byTheirFirstLetter() {
    List&amp;lt;String&amp;gt; strings = asList(&amp;quot;apples&amp;quot;, &amp;quot;apricots&amp;quot;, &amp;quot;oranges&amp;quot;);

    Map&amp;lt;Character, Collection&amp;lt;String&amp;gt;&amp;gt; grouping = group(strings, λ(s, s.charAt(0));

    assertThat(grouping.size(), is(2));
    assertThat(grouping.keySet(), contains(&#39;a&#39;, &#39;o&#39;));
    assertThat(grouping.get(&#39;a&#39;), contains(&amp;quot;apples&amp;quot;, &amp;quot;apricots&amp;quot;));
    assertThat(grouping.get(&#39;o&#39;), contains(&amp;quot;oranges&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s pretty obvious to see that we are grouping these strings by their first letter, &lt;code&gt;a&lt;/code&gt; for apples and apricots, &lt;code&gt;o&lt;/code&gt; for oranges.  We have a number of assertions to make sure that the group is how we expected.&lt;/p&gt;

&lt;h2 id=&#34;the-implementation&#34;&gt;The implementation&lt;/h2&gt;

&lt;p&gt;Now we have our specification we can start to implement the function.  Our test has already given us our signature.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Map&amp;lt;Character, Collection&amp;lt;String&amp;gt;&amp;gt; group(Collection&amp;lt;String&amp;gt; strings, Function&amp;lt;Character, String&amp;gt; function);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can simply iterate over the given list, applying the given function and placing them in the result (using Guava&amp;rsquo;s &lt;a href=&#34;http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ListMultimap.html&#34;&gt;ListMultimap&lt;/a&gt; for ease.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ListMultimap&amp;lt;Character, String&amp;gt; groups = ArrayListMultimap.create();

for (String string : string)
    groups.put(function.apply(string), string);

return groups.asMap();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, we have a simple function that can group our list of strings by their first character.  Unfortunately this isn&amp;rsquo;t very generic and if we wanted a different type of grouping this would not work.  Let&amp;rsquo;s try another test to help us make this more usable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static Person Rod = aPerson(&amp;quot;Rod&amp;quot;, 50);
private static Person Jane = aPerson(&amp;quot;Jane&amp;quot;, 21);
private static Person Freddy = aPerson(&amp;quot;Freddy&amp;quot;, 50);

@Test
public void groupPeople_byAge() {
    List&amp;lt;Person&amp;gt; people = asList(Rod, Jane, Freddy);

    Map&amp;lt;Integer, Collection&amp;lt;Person&amp;gt;&amp;gt; groups = group(people, λ(p, p.age()));

    assertThat(groups.size(), is(2));
    assertThat(groups.keySet(), contains(21, 50));
    assertThat(groups.get(21), contains(Jane));
    assertThat(groups.get(50), contains(Rod, Freddy));
}

class Person {
    public static Person aPerson(String name, Integer age) {
        return new Person(name, age);
    }

    private Person(String name, Integer age) {
        this.name = name,
        this.age = age;
    }

    public Integer age() { return age };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need a generic signature for our group function.  Here&amp;rsquo;s what I came up with.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;lt;Group, Item&amp;gt; Map&amp;lt;Group, Collection&amp;lt;Item&amp;gt;&amp;gt; group(Collection&amp;lt;Item&amp;gt; items, Function&amp;lt;Item, Group&amp;gt; grouping);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a shame that trying to make this readable makes a huge long signature.  I admit I could have just used &lt;code&gt;G&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt; instead of &lt;code&gt;Group&lt;/code&gt; and &lt;code&gt;Item&lt;/code&gt; however I do feel this explains the usage more.&lt;/p&gt;

&lt;p&gt;Also, I was quite pleased at how close my Java implementation came out to the original Scala.  It wasn&amp;rsquo;t the intention, I just wanted to make it readable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Group a list of strings by their first character in Java&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;group(strings, λ(s, s.charAt(0));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Group a list of string by their first character in Scala&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;strings groupBy (_.charAt(0))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I found the group function very useful, especially when creating reports.  I do realise that I wanted to remove iteration/duplication and the new &lt;code&gt;group()&lt;/code&gt; function iterates, maybe this could be further improved with tail recursion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing corrupted time machine backups</title>
      <link>http://tonylawrence.com/post/unix/fixing-corrupted-time-machine-backups/</link>
      <pubDate>Sat, 11 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/unix/fixing-corrupted-time-machine-backups/</guid>
      <description>

&lt;p&gt;Yesterday my MacBook Air decided that it no longer trusted my Time Machine backup and wanted to create a new one.  Apart from the time this would take (20gb over WiFi) and the fact that I&amp;rsquo;d lose my current history I was a little bit wary so declined.  Unfortunately this was not a the last I heard of it.  Time Machine refused to back up until I started a new back up.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/unix/time-machine-error.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;!-- more --&gt;

&lt;h3 id=&#34;some-digging&#34;&gt;Some digging&lt;/h3&gt;

&lt;p&gt;Firstly, I&amp;rsquo;m not using an Apple Time Capsule for my backups, I&amp;rsquo;ve a nice ReadyNAS Ultra for this purpose.  I reached for Google and began searching.  I found many articles talking about being unable to backup, find the drive and even backup errors but not many describing a fix to my problem.  I did however come across a post by &lt;a href=&#34;http://www.garth.org/archives/2011,08,27,169,fix-time-machine-sparsebundle-nas-based-backup-errors.html&#34;&gt;Garth Gillespie&lt;/a&gt; detailing a solution.  He describes how to mount the backup and run a file system check to repair and problems.&lt;/p&gt;

&lt;p&gt;This could save the day.  But it&amp;rsquo;s never that simple is it?  For me I was unable to fix the file system due to being forced to mount it read-only.  I needed to find out a way to mount it read-write before I could continue.&lt;/p&gt;

&lt;h3 id=&#34;mounting-the-file-system-to-allow-writing&#34;&gt;Mounting the file system to allow writing&lt;/h3&gt;

&lt;p&gt;I must admit, once I&amp;rsquo;d figured out the magic commands the rest was easy.  I followed Garths steps and it worked.  I&amp;rsquo;ll detail my steps below (for my record more than anything else.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo su -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before you start, make sure you don&amp;rsquo;t have Time Machine enabled or any of the Time Machine drives mounted, we will do this manually.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir /Volumes/TimeMachine
$ mount_afp afp://ReadyNAS:&amp;lt;pass&amp;gt;@&amp;lt;ip-address&amp;gt;/ReadyNAS /Volumes/TimeMachine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have mounted our share we can start to access the individual Time Machine bundle.  Let&amp;rsquo;s reset and dirty flags.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sometimes the Sparse bundle folder is mark as &amp;ldquo;bad&amp;rdquo; and cannot be mounted read-write, this is solved using the following - thanks David!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chflags -R nouchg /Volumes/TimeMachine/&amp;lt;my-backup&amp;gt;.sparsebundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we can attach it with the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hdiutil attach -nomount -readwrite -noverify -noautofsck /Volumes/TimeMachine/&amp;lt;my-backup&amp;gt;.sparsebundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After executing the above command I got the following output.  It&amp;rsquo;s the last entry we are interested in, the &lt;code&gt;Apple_HFS&lt;/code&gt; partition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/dev/disk2          	GUID_partition_scheme
/dev/disk2s1        	EFI
/dev/disk2s2        	Apple_HFS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have access to the sparse bundle as a device we can run a file system check and correct any errors (replace with the device listed for you.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I used to try a file system check with &lt;code&gt;fsck_hfs&lt;/code&gt; but ran into many &amp;ldquo;device busy&amp;rdquo; errors.  A little digging I tried the &lt;code&gt;diskutil&lt;/code&gt; command which seemed to work instead.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;#fsck_hfs -drfy /dev/disk2s2&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ diskutil repairVolume /dev/disk2s2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This might take a while, especially if you are doing this over WiFi.  During this process, make sure your Mac does not go to sleep.  Once finished all that there is left is to clean up.  We have to inform Time Machine that the backup has been verified, this is by a small edit to it&amp;rsquo;s &lt;code&gt;plist&lt;/code&gt; file.  This lives inside the sparsebundle we mounted in &lt;code&gt;/Volumes/TimeMachine&lt;/code&gt; and is called &lt;code&gt;com.apple.TimeMachine.MachineID.plist&lt;/code&gt;.  I&amp;rsquo;m going to use &lt;code&gt;vi&lt;/code&gt; for this but you can use any editor you choose.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /Volumes/TimeMachine/&amp;lt;my-backup&amp;gt;.sparsebundle
$ vi com.apple.TimeMachine.MachineID.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we need to remove the following two lines to hide the fact that Time Machine has already rejected the backup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;RecoveryBackupDeclinedDate&amp;lt;/key&amp;gt;
&amp;lt;date&amp;gt;some-data&amp;lt;/date&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we change the state of the verification from failed (&lt;code&gt;2&lt;/code&gt;), to passed (&lt;code&gt;0&lt;/code&gt;).  Change&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;VerificationState&amp;lt;/key&amp;gt;
&amp;lt;integer&amp;gt;2&amp;lt;/integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;VerificationState&amp;lt;/key&amp;gt;
&amp;lt;integer&amp;gt;0&amp;lt;/integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, issue the two following commands and we are done.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hdiutil detach /dev/disk2s2
$ umount /Volumes/TimeMachine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now re-enable Time Machine and let it backup.  Fingers crossed it will verify that the backup is ok and continue where it left off preserving your existing history.&lt;/p&gt;

&lt;h3 id=&#34;update&#34;&gt;Update&lt;/h3&gt;

&lt;p&gt;I’ve recently replaced my ReadyNAS with a Synology and have also had to fix the backup with this.  Luckily the script still works but the share name is different &lt;code&gt;time-machine&lt;/code&gt;.  So I’ve updated the script to ask for this information and added a download link.&lt;/p&gt;

&lt;h3 id=&#34;a-little-script&#34;&gt;A little script&lt;/h3&gt;

&lt;h4 id=&#34;thanks-to-jacco-hoeve-for-help-with-some-automation&#34;&gt;Thanks to Jacco Hoeve for help with some automation!&lt;/h4&gt;

&lt;p&gt;This is setup for ReadyNAS users so assumes your share is called ReadyNAS.  Create a file named &lt;code&gt;repair.sh&lt;/code&gt; and copy the below into it (&lt;a href=&#34;http://tonylawrence.com/downloads/time-machine/repair.sh&#34;&gt;or download it here&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [[ $(whoami) != &#39;root&#39; ]]; then
    exit 1
fi

read -p &#39;Enter Time Machine Hostname: &#39; HOSTNAME
read -p &#39;Enter Share: &#39; SHARE
read -p &#39;Enter Username: &#39; USERNAME
read -s -p &#39;Enter Password: &#39; PASSWORD

TM_NAME=$(hostname -s | sed -e &#39;s/-/ /g&#39;)
MOUNT=/Volumes/TimeMachine
SPARSEBUNDLE=$MOUNT/$TM_NAME.sparsebundle
PLIST=$SPARSEBUNDLE/com.apple.TimeMachine.MachineID.plist

echo &amp;quot;Disabling Time Machine&amp;quot;
tmutil disable

echo &amp;quot;Mounting volume&amp;quot;
mkdir $MOUNT
mount_afp afp://$USERNAME:$PASSWORD@$HOSTNAME/$SHARE $MOUNT

echo &amp;quot;Changing file and folder flags&amp;quot;
chflags -R nouchg &amp;quot;$SPARSEBUNDLE&amp;quot;

echo &amp;quot;Attaching sparse bundle&amp;quot;
DISK=`hdiutil attach -nomount -readwrite -noverify -noautofsck &amp;quot;$SPARSEBUNDLE&amp;quot; | grep Apple_HFS | cut -f 1`

echo &amp;quot;Repairing volume&amp;quot;
#diskutil repairVolume $DISK
/sbin/fsck_hfs -fry $DISK

echo &amp;quot;Fixing Properties&amp;quot;
cp &amp;quot;$PLIST&amp;quot; &amp;quot;$PLIST.backup&amp;quot;
sed -e &#39;/RecoveryBackupDeclinedDate/{N;d;}&#39;   \
    -e &#39;/VerificationState/{n;s/2/0/;}&#39;       \
    &amp;quot;$PLIST.backup&amp;quot; \
    &amp;gt; &amp;quot;$PLIST&amp;quot;

echo &amp;quot;Unmounting volumes&amp;quot;
hdiutil detach /dev/$DISK
umount $MOUNT

echo &amp;quot;Enabling Time Machine&amp;quot;
tmutil enable

echo &amp;quot;Starting backup&amp;quot;
tmutil startbackup

exit 0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Publishing from the iCloud</title>
      <link>http://tonylawrence.com/post/blog/publishing-from-the-icloud/</link>
      <pubDate>Thu, 02 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/blog/publishing-from-the-icloud/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve recently been using IA Writer as my markdown editor.  I love the fact that I can use any of my iDevices and that it&amp;rsquo;s all synced in the iCloud.  But how do I access the iCloud data so that I can include it in my Octopress git repository?&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;show-me-the-data&#34;&gt;Show me the data&lt;/h2&gt;

&lt;p&gt;On Mountain Lion (and Lion I believe) all the iCloud data is hidden away in your home directory.  Each application is given it&amp;rsquo;s own area just like iOS apps.  Check out &lt;code&gt;~/Library/Mobile Documents&lt;/code&gt;, you&amp;rsquo;ll see folders for each iCloud application that you have launched.  Your files are stored in here.&lt;/p&gt;

&lt;p&gt;Once you have found your editors data folder we can now create a link from here into your git repository.  Unfortunately, symbolic links are not good enough for either iCloud or git so we&amp;rsquo;ll need to use hard links.  Mountain Lion does not ship with this tool but let&amp;rsquo;s not worry, it&amp;rsquo;s very easy to make our own.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;be careful, deleting from a hard link deletes from the source!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;creating-hard-links&#34;&gt;Creating hard links&lt;/h2&gt;

&lt;p&gt;So, at the end of this post is the complete source code to create hard links.  Copy the code into a new file named &lt;code&gt;hlink.c&lt;/code&gt; and compile it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gcc hlink.c -o hlink
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create a hard link to link our blog posts into our iCloud documents.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hlink ~/&amp;lt;octopress_dir&amp;gt;/source/_posts ~/Library/Mobile\ Documents/&amp;lt;app_dir&amp;gt;/Documents/pages
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-about-dropbox&#34;&gt;What about DropBox?&lt;/h2&gt;

&lt;p&gt;I did a quick comparison between the iCloud integration and DropBox.  Unfortunately, DropBox seemed to be more manual regarding the syncing.  Also, if you lose your network connection (happens to me often whilst on a train) the DropBox integration moves the document to local storage and you have to manually copy back into DropBox - not a nice feature.  iCloud seems to handle this with ease and I don&amp;rsquo;t have to install anything to get it to work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;source code for hlink&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char* argv[]) {
  if (argc != 3) {
    fprintf(stderr, &amp;quot;Use: hlink &amp;lt;src_dir&amp;gt; &amp;lt;target_dir&amp;gt;\n&amp;quot;);
    return 1;
  }

  int ret = link(argv[1], argv[2]);
  if (ret != 0) perror(&amp;quot;link&amp;quot;);
  return ret;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Octopress</title>
      <link>http://tonylawrence.com/post/blog/setting-up-octopress-on-osx/</link>
      <pubDate>Wed, 01 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/blog/setting-up-octopress-on-osx/</guid>
      <description>

&lt;p&gt;When upgrading to Mountain Lion I decided to replace my existing Wordpress site with a static one.  There were many reasons for this.  With Wordpress I was unable to easily version control my posts into GitHub.  I also had no control over and backup strategies.  One of my colleagues - &lt;a href=&#34;http://baddotrobot.com&#34;&gt;Toby Weston&lt;/a&gt; - was running Octopress so I thought I&amp;rsquo;d take a look.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Octopress is based upon Jekyll, developed and used by GitHub.com.  It uses Ruby to generate a static site, this can them be published to a multiple of hosting solutions, I have decided to use GitHub pages.  It looks elegant and can be customised using themes or changing the styles yourself (if you are familiar with html/sass.)  There are also many available plugins to extend the functionality of the site.&lt;/p&gt;

&lt;p&gt;Unfortunately, even the latest, greatest OSX 10.8 does not come with all the tools Octopress requires.&lt;/p&gt;

&lt;h4 id=&#34;requirements-not-met-by-mountain-lion&#34;&gt;Requirements not met by Mountain Lion&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Ruby version is out of date, requires &amp;gt;= 1.9.3&lt;/li&gt;
&lt;li&gt;Ruby Bundler is missing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;rsquo;d think it would be very easy to upgrade Ruby, I found out that this was not the case.  The easiest way is to use a tool named RVM (ruby version manager) but this is only currently available in source for which needs compiling.  Don&amp;rsquo;t worry, this is quite trivial once you have the tools at hand.&lt;/p&gt;

&lt;h4 id=&#34;tools-required-by-rvm&#34;&gt;Tools required by RVM&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Some sort of C compiler (if you have Xcode, you&amp;rsquo;ll be ok)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If like me you like to keep your mac clutter free you&amp;rsquo;ll never be happy installing the mammoth Xcode.  There is a solution, Apple have separated out their developer tools into a small packages that is quick to download and install.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;So, let&amp;rsquo;s get on with the setup.  First we can install those command line tools from: &lt;a href=&#34;https://developer.apple.com/downloads/index.action&#34;&gt;Apple Developer Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we install the Ruby Version Manager:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bash -s stable &amp;lt; &amp;lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And use it to update Ruby.  I&amp;rsquo;m going to update to the latest version available at the time of writing, this is 1.9.3.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;to start using RVM in your current terminal session you need to run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;source ~/.rvm/scripts/rvm&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rvm install 1.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;if you choose version &amp;lt;= 1.9.2 you must specify &amp;ndash;with-gcc=clang otherwise it will not install.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Ok, that&amp;rsquo;s our Mac up to date, now it&amp;rsquo;s time to look at Octopress.&lt;/p&gt;

&lt;p&gt;Octopress lives on GitHub so it&amp;rsquo;s really easy for us to pull our own version and keep up with the latest enhancements.  Decide where you want it to live then clone yourself a copy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git://github.com/imathis/octopress.git &amp;lt;dir&amp;gt;
$ cd &amp;lt;dir&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;you&amp;rsquo;ll be asked if you trust the .rvmrc file, all this will do is switch to the required version of Ruby.  If you didn&amp;rsquo;t install ruby 1.9.3 you will need to update the .rvmrc to require your version to prevent any warnings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ruby --version # should report your Ruby version &amp;gt;= 1.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we&amp;rsquo;ve installed the required bundler we are ready to go.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install bundler
$ bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the default Octopress theme&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rake install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create 2 directories, one for sass and another for source.  We should now commit these into out repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git add sass source
$ git commit -m &amp;quot;Added initial theme&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rewards&#34;&gt;Rewards&lt;/h3&gt;

&lt;p&gt;And now we can run up a local version to test the install.  Run the following command and head to &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; to see your new Octopress site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rake preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now have a full install of Octopress and can start blogging.  I&amp;rsquo;d advise you to head over to their deployment site for options and guides on how to publish.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fluent Guava</title>
      <link>http://tonylawrence.com/post/java/fluent-guava/</link>
      <pubDate>Thu, 31 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/fluent-guava/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been far too long since I&amp;rsquo;ve written anything on this site.  I&amp;rsquo;ve got plenty of topics, it&amp;rsquo;s just finding the time to write something down.  This one comes from a comment on one of my previous posts about Guava and &lt;a href=&#34;http://tonylawrence.com/post/java/modern-java/&#34;&gt;Modern Java&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Guava has recently been upgraded to version 12 and along with this release comes the idea of a &lt;a href=&#34;http://martinfowler.com/bliki/FluentInterface.html&#34;&gt;Fluent Interface&lt;/a&gt; as described by Martin Fowler and Eric Evans.  This might bring it more in line with TotallyLazy and the reason I took to the library so quickly.  I hope to introduce to you the &lt;code&gt;FluentIterable&lt;/code&gt; class and show how it can improve your Java.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The first thing you&amp;rsquo;ll notice is that like TotallyLazy we have to convert our dull Java collections into the rich collection offered by the fluent interface.  This is a simple step using the &lt;code&gt;from&lt;/code&gt; class method on the interface itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static java.util.Arrays.asList;
import static com.google.common.collect.FluentIterable.from;

List&amp;lt;Integer&amp;gt; javaList = asList(1, 2, 3, 4, 5);
FluentIterable&amp;lt;Integer&amp;gt; richList = from(javaList);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have all the power in the &lt;code&gt;richList&lt;/code&gt;.  But once again, if we need to return normal Java lists we have to convert back again.  Note: The list returned from Guava will be immutable so you can&amp;rsquo;t go changing it afterwards (a good thing imho).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; javaList = richList.toImmutableList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we know how to get hold of a collection using the fluent interface what can we do with it?  Well pretty much all the things we could do with Guava functions/predicates before only this time the language should read more fluently.  Let&amp;rsquo;s take a look at an example using both the fluent interface and the old style.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; numberList = asList(1, 2, 3, 4, 5);

transform(numberList, byHalf()); // old style
        
FluentIterable numbers = from(numberList); // fluent interface
numbers.transform(byHalf());

// assume byHalf() returns us a Guava Function&amp;lt;Integer,Integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;re thinking that the fluent interface takes more code.  And in this simple example it does because we need to enrich the standard java list.  Let&amp;rsquo;s go for a few more examples of different operations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; onlyEvens = numbers.filter(byEvenNumbers());
List&amp;lt;Integer&amp;gt; bigNumbers = numbers.filter(bigValues());
List&amp;lt;Integer&amp;gt; smallSet = numbers.limit(5);
boolean hasLargeOnes = numbers.anyMatch(bigValues());

// one of my favourites as I always find it missing
List&amp;lt;Integer&amp;gt; first = numbers.first();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For me this reads better and the transformation operation is now on the object concerned instead of some global method somewhere inside Guava.  Lets take my previous example from Guava and TotallyLazy and compare them with the fluent interface.&lt;/p&gt;

&lt;h3 id=&#34;guava&#34;&gt;Guava&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
    List&amp;lt;Integer&amp;gt; evenNumbers = transform(input, intoEvenNumber());
    List&amp;lt;Integer&amp;gt; halvedIfMultipleOfFour = transform(evenNumbers, halfIfMultipleOfFour());
    return transform(halvedIfMultipleOfFour, addThreeIfContainsNumberTwo());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;totally-lazy&#34;&gt;Totally Lazy&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private Sequence&amp;lt;Integer&amp;gt; calculate(Sequence&amp;lt;Integer&amp;gt; input) {
    return input
        .map(intoEvenNumber())
        .map(halfIfMultipleOfFour())
        .map(addThreeIfContainsNumberTwo());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;guava-fluent-interface&#34;&gt;Guava Fluent Interface&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private FluentIterable&amp;lt;Integer&amp;gt; calculate(FluentIterable&amp;lt;Integer&amp;gt; input) {
    return input
        .transform(intoEvenNumber())
        .transform(halfIfMultipleOfFour())
        .transform(addThreeIfContainsNumberTwo());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not bad and very similar to the TotallyLazy example.
We have a fluent syntax which we can replace all our old guava code with.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So for me Guava has finally the beginning of an expressive language that allows us to apply functions to our collections.  I&amp;rsquo;m sure there&amp;rsquo;s more to come but this for me is a good start and means that on projects that use Guava I can hope to improve the readability of some of the code.&lt;/p&gt;

&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.guava-libraries.googlecode.com/git-history/v12.0/javadoc/index.html&#34;&gt;Guava FluentIterable JavaDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tonyklawrence/blog-posts/tree/master/fluent-guava&#34;&gt;Example Project on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Lambda Magic?</title>
      <link>http://tonylawrence.com/post/java/lambda-magic/</link>
      <pubDate>Tue, 10 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/lambda-magic/</guid>
      <description>

&lt;p&gt;I often hear people complain about Java (I’m not excluding myself from this) about how restrictive the language can be compared to others.  We all know how noisy it is when working with functional libraries.  Wouldn’t it be great if we had a lambda style syntax in Java?&lt;/p&gt;

&lt;p&gt;This is where &lt;a href=&#34;https://github.com/hraberg/enumerable&#34;&gt;Enumerable&lt;/a&gt; for Java comes in.  This has been developed by &lt;a href=&#34;http://ghettojedi.org/&#34;&gt;Håkan Råberg&lt;/a&gt; who describes the library as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Ruby/Smalltalk style internal iterators for Java 5 using bytecode transformation to capture expressions as closures.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;What does that mean?  Using post processing (either during runtime or post compilation using (&lt;a href=&#34;http://asm.ow2.org/&#34;&gt;ASM&lt;/a&gt;) we can write a simple single expression lambda (or closure) directly in our Java code.&lt;/p&gt;

&lt;h3 id=&#34;the-example&#34;&gt;The Example&lt;/h3&gt;

&lt;p&gt;As before we start off with a sequence of numbers.  Imagine we want to increment each value by 5.  A simple operation solved in an imperative manner would be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; addFiveToEach(List&amp;lt;Integer&amp;gt; numbers) {
    List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;Integer&amp;gt;();
    for (Integer number : numbers) {
        result.add(number + 5);
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can’t really complain about the code above, nice and simple, but let’s see what we can improve on with enumerable java.&lt;/p&gt;

&lt;h3 id=&#34;with-totallylazy&#34;&gt;With TotallyLazy&lt;/h3&gt;

&lt;p&gt;Let me start with my new favourite TotallyLazy.  Using enumerable we can now embed a simple lamba expression right into the transformation of the number sequence (using the λ symbol.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Sequence&amp;lt;Integer&amp;gt; addFiveToEach(Sequence&amp;lt;Integer&amp;gt; numbers) {
    return numbers.map(λ(i, i + 5));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Amazingly this compiles directly in IntelliJ without any messing about with settings, all you need is TotallyLazy and enumerable libraries in the project.  How can this be?  Well, with a couple of static imports of course!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static com.googlecode.totallylazy.lambda.Lambdas.λ;
import static org.enumerable.lambda.Parameters.i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This first one includes the lambda symbol into the namespace and the other includes a variable named &lt;code&gt;i&lt;/code&gt; of type &lt;code&gt;int&lt;/code&gt;.  There are other options for different types such as &lt;code&gt;s&lt;/code&gt; for &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; for &lt;code&gt;Char&lt;/code&gt; but I’ll let you have the fun finding them all out.&lt;/p&gt;

&lt;p&gt;Here’s an example of determining the length every string in the sequence (interestingly the input and output types do not have to be the same):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Sequence&amp;lt;Integer&amp;gt; lengthOfEach(Sequence&amp;lt;String&amp;gt; strings){
    return strings.map(λ(s, s.length()));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-caveat&#34;&gt;The caveat&lt;/h3&gt;

&lt;p&gt;There is one gotcha in this.  Because this uses byte code manipulation to convert our lambda into an anonymous function for TotallyLazy, we have to execute the code using a javaagent argument such as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -javaagent:enumerable-java-&amp;lt;version&amp;gt;.jar [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(or we could post process out classes to remove the runtime dependency - please refer to the libraries documentation on this &lt;a href=&#34;https://github.com/hraberg/enumerable#readme&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;with-guava&#34;&gt;With Guava&lt;/h3&gt;

&lt;p&gt;Like some of my projects, you may be using Guava and do not want to switch over to TotallyLazy.  Luckily the author has allowed for this by offering a support class that will transform functions making them suitable for guava.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static org.enumerable.lambda.support.googlecollect.LambdaGoogleCollections.function;

private List&amp;lt;Integer&amp;gt; addFiveToEach(List&amp;lt;Integer&amp;gt; numbers) {
    return transform(numbers, function(i, i + 5));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works in exactly the same way (and requires javaagent) but transforms the function code into an anonymous Guava function.  Still, for simple transformations the syntax is pretty tidy.  Support for predicates and suppliers are also in there.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I really like this idea but I have yet to really use it for any real code.  Two small things are holding me back.  Firstly is that it’s not nice running a server with the extra javaagent to manipulate the code.  Post processing during the build would be the better option but it still feels a little dirty.  Secondly, I rarely need transformations this simple, and when adding more complicated code I would also extract it out for testability and reducing noise, thus negating the need for inline lambdas.&lt;/p&gt;

&lt;p&gt;I still think it’s pretty cool and a great way of extending the life of Java.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modern Java - The Totally Lazy Way</title>
      <link>http://tonylawrence.com/post/java/the-totally-lazy-way/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/the-totally-lazy-way/</guid>
      <description>

&lt;p&gt;A few weeks ago I blogged about &lt;a href=&#34;http://tonylawrence.com/post/java/modern-java/&#34;&gt;Modern Java&lt;/a&gt; using Googles Guava to write functional programs. One of the comments on that blog was by a good friend on mine Franck Rasolo. He suggested I took a look at &lt;a href=&#34;https://github.com/bodar/totallylazy&#34;&gt;Totally Lazy&lt;/a&gt; by &lt;a href=&#34;http://dan.bodar.com&#34;&gt;Daniel Bodart&lt;/a&gt; as an alternative to Guava. So I decided to implement the same functional calculator I wrote in the previous post using totally lazy instead and here are my findings.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;how-does-totallylazy-compare-to-guava&#34;&gt;How does TotallyLazy compare to Guava?&lt;/h3&gt;

&lt;p&gt;Assuming we have a list of numbers defined:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; numbers = asList(2, 4, 6, 8, 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;guava&#34;&gt;Guava&lt;/h4&gt;

&lt;p&gt;Imagine we want to halve each of the values, using the Guava API we can transform the values simply with an anonymous implementation of the &lt;code&gt;Function&amp;lt;F, T&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;transform(numbers, new Function&amp;lt;Integer, Integer&amp;gt;() {
    public Integer apply(Integer from) {
        return from / 2;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously this isn&amp;rsquo;t very pretty but we can hide this away in a named implementation with a suitably named factory method to give us something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;transform(numbers, intoHalfTheirValue());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t go into detail here on how you can write a named function with a descriptive factory method but please check out the previous post if you&amp;rsquo;d like to know this.&lt;/p&gt;

&lt;p&gt;As you can see the Guava solution is simple, neat and very easy to understand. So how can Totally Lazy improve on this?&lt;/p&gt;

&lt;h4 id=&#34;totally-lazy&#34;&gt;Totally Lazy&lt;/h4&gt;

&lt;p&gt;One of the first changes when using Totally Lazy is that we no longer work with standard Java &lt;code&gt;Lists&lt;/code&gt;, but with &lt;code&gt;Sequences&lt;/code&gt;. This might sound like a bad thing to you but using a sequence offers us a more natural functional style to the code, and it&amp;rsquo;s also very easy to convert from a &lt;code&gt;List&lt;/code&gt; into a &lt;code&gt;Sequence&lt;/code&gt; and back.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Sequence&amp;lt;Integer&amp;gt; sequence = sequence(numbers);
List&amp;lt;Integer&amp;gt; list = sequence.toList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this sequence we can now map our numbers into new numbers in a similar way to Guava however instead of implementing the &lt;code&gt;Function&lt;/code&gt; interface we now implement Totally Lazy&amp;rsquo;s &lt;code&gt;Callable1&amp;lt;Input, Output&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;sequence.map(new Callable1&amp;lt;Integer, Integer&amp;gt;() {
    public Integer call(Integer from) throws Exception {
        return from / 2;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And showing a cleaner call with a factory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;sequence.map(intoHalfTheirValue());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you&amp;rsquo;ll have noticed that the implementation of &lt;code&gt;Function&amp;lt;T, F&amp;gt;&lt;/code&gt; and &lt;code&gt;Callable1&amp;lt;Input, Output&amp;gt;&lt;/code&gt; are almost identical, only the method name differs from &lt;code&gt;apply()&lt;/code&gt; to &lt;code&gt;call()&lt;/code&gt;.  The main benefit of using the &lt;code&gt;Sequence&lt;/code&gt; api is that we can now use method chaining (and lambdas which I&amp;rsquo;ll describe in a following post.)&lt;/p&gt;

&lt;p&gt;So to conclude with a Totally Lazy implementation of the functional calculator from the previous post showing method chaining&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TotallyLazyFunctionalCalculator implements Calculator {

    public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
        return calculate(sequence(input)).toList();
    }
    
    private Sequence&amp;lt;Integer&amp;gt; calculate(Sequence&amp;lt;Integer&amp;gt; input) {
        return input
            .map(intoEvenNumber())
            .map(halfIfMultipleOfFour())
            .map(addThreeIfContainsNumberTwo());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think going forward I will be using Totally Lazy over Guava as it feels more natural, nesting transforms in Guava is a little noisy.&lt;/p&gt;

&lt;p&gt;In my next post I&amp;rsquo;ll talk about using &lt;a href=&#34;https://github.com/hraberg/enumerable&#34;&gt;Enumerable Java&lt;/a&gt; to allow us to use lambda expressions directly in Java.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modern Java</title>
      <link>http://tonylawrence.com/post/java/modern-java/</link>
      <pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/modern-java/</guid>
      <description>

&lt;p&gt;I recently attended XPDay London 2011 organised by the great eXtreme Tuesday Club and had a great 2 days.  Many of the talks I went to were more exploratory than anything but sometimes it’s a great way to learn more.  One of the early sessions was hosted by Julian Kelsey &lt;a href=&#34;http://www.twitter.com/scrawlings&#34;&gt;@scrawlings&lt;/a&gt; and Andrew Parker &lt;a href=&#34;http://www.twitter.com/aparker42&#34;&gt;@aparker42&lt;/a&gt; and was predominately about refactoring Java into a more function style, and another by Nat Pryce &lt;a href=&#34;http://www.twitter.com/natpryce&#34;&gt;@natpryce&lt;/a&gt; about test driving function programming which in the end turned into something called Modern Java.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;From what I understood Modern Java was about taking a functional approach to programming and utilising libraries such as Googles Guava to produce simpler, immutable, easily tested and less coupled software (albeit at a risk of noise due to the java language.)&lt;/p&gt;

&lt;h3 id=&#34;why-would-you-want-to-do-this-you-might-ask&#34;&gt;Why would you want to do this you might ask?&lt;/h3&gt;

&lt;p&gt;Well, I’ve been working with these libraries for a few years and have realised the potential functional programming offers even to a Java developer.  Recently, I refactored some code with one of my colleagues James Bull and that process gave me the idea to write this post.  I hope to help explain how you can do this and also try to convince you that the end result is a better place to be.&lt;/p&gt;

&lt;p&gt;To do this we are going to need an simple example, we&amp;rsquo;ll need to build a calculator which will do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given a list of numbers&amp;hellip;&lt;/li&gt;
&lt;li&gt;If the number is odd add 1 to make it even&lt;/li&gt;
&lt;li&gt;If the new number becomes a mutliple of 4 then halve it&lt;/li&gt;
&lt;li&gt;If the result contains a 2 then add 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully this is simple enough, but lets go through a few examples (would make good test cases)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given 1, add 1 becomes 2, is not a mutiple of 4, does contain a 2 so add 3, result 5&lt;/li&gt;
&lt;li&gt;Given 4, is even, is multiple of 4 so halve it which becomes 2,  does contains a 2 so add 3, result 5&lt;/li&gt;
&lt;li&gt;Given 7, add 1 becomes 8, is multiple of 4 so halve it which becomes 4, does not contain a 2, result 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;everyday-tdd-approach&#34;&gt;Everyday TDD approach&lt;/h3&gt;

&lt;p&gt;If we are going to take the expected imperative TDD approach we would break the requirements down into doing the simplest thing possible so we might start off with just the first part of the example which will add 1 to odd numbers.  We might start with a test something like this (you might really start with a single number before handling a list but this is an example and don’t want it to get too long.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Test
public void addsOneToEveryOddNumber() {
    List someNumbers = asList(1, 2, 3, 5, 17, 7, 0, 14);
    List expectedNumber = asList(2, 2, 4, 6, 18, 8, 0, 14);
    assertThat(calculator.calculate(someNumbers), is(equalTo(expectedNumber)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the implementation of the calculator to make this pass could be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
    List&amp;lt;Integer&amp;gt; output = new ArrayList&amp;lt;Integer&amp;gt;();

    for (Integer number : input) {
        if (number % 2 != 0) number++;
        output.add(number);
    }

    return output;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, we have a working test and are a third of the way through the requirements.  Next we would go onto the next part, easy.  We add a new test to check if the number is divisible by 4 we divide by 2.&lt;/p&gt;

&lt;p&gt;Now, if we want to use a random set of numbers as input we have to factor in the first calculation (we could just use even numbers but that’s not really a great test.)  And when testing the third case we need to factor in case 1 and 2, this is making our test cases more complicated than we need to.&lt;/p&gt;

&lt;p&gt;Anyway, we could end up with our calculator looking something like this (with a few methods extracted, not included for conciseness.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
    List&amp;lt;Integer&amp;gt; output = new ArrayList&amp;lt;Integer&amp;gt;();

    for (Integer number : input) {
        if (odd(number)) number++;
        if (multipleOfFour(number)) number /= 2;
        if (containsATwo(number)) number += 3;
        output.add(number);
    }

    return output;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, it’s a nice simple, readable piece of code that has been well tested.&lt;/p&gt;

&lt;p&gt;Unfortunately, the test cases are quite complicated due to having to consider all 3 stages of the calculation. You could make these extracted methods public and test them but that’s breaking our encapsulation. If we decided to add a forth, we would have to change all the other tests which is not ideal.&lt;/p&gt;

&lt;h3 id=&#34;so-how-can-a-functional-approach-help-us&#34;&gt;So how can a functional approach help us?&lt;/h3&gt;

&lt;p&gt;Using a library such as &lt;a href=&#34;https://github.com/google/guava&#34;&gt;Guava&lt;/a&gt; which offers us a small amount of power of functional programming, allowing us to transform, filter and find objects in lists. The guava function interface used by transform is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Function {
    T apply(@javax.annotation.Nullable F f);
    boolean equals(@javax.annotation.Nullable java.lang.Object o);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By implementing the apply method we can transform the input into the required output (not required to be of the same type.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Integer apply(Integer number) {
    return number % 2 == 0 ? number : number + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach enables us to extract out each of our separate concerns into individual classes and test them alone. So starting at the beginning we would start with the first case of making all numbers even.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Test
public void oddNumbersArePromotedToNextEvenNumber() {
    assertThat(function.apply(27), is(28));
    assertThat(function.apply(4), is(4));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way we end up with 3 functions, each doing one thing and nice simple tests. But how do we connect them together to form the calculator? We just transform the input using the new functions we’ve written (using a factory method to help reduce noise of new.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
    List&amp;lt;Integer&amp;gt; evenNumbers = transform(input, intoEvenNumber());
    List&amp;lt;Integer&amp;gt; halvedIfMultipleOfFour = transform(evenNumbers, halfIfMultipleOfFour());
    return transform(halvedIfMultipleOfFour, addThreeIfContainsNumberTwo());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then have a simple test for the calculator that given a set of input we get the right output, we no longer need to test all the different edge cases, each of the processes. Adding a new condition is as simple as writing the function for it, updating the calculator test with the new output and add the transformation to the code.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve included the full class definition of one of the functions in case you&amp;rsquo;d like to try this yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.google.common.base.Function;

public class HalfIfMultipleOfFour implements Function&amp;lt;Integer, Integer&amp;gt; {

    public static HalfIfMultipleOfFour halfIfMultipleOfFour() {
        return new HalfIfMultipleOfFour();
    }

    public Integer apply(Integer number) {
        return multipleOfFour(number) ? number / 2 : number;
    }

    private boolean multipleOfFour(Integer number) {
        return number % 4 == 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There have been a lot of information to cover in the post, I realise that I&amp;rsquo;ve been quite brief however I&amp;rsquo;m happy to cover anything in more detail if you leave a comment.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>