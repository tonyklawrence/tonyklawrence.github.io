<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tdd on Tony Lawrence</title>
    <link>http://tonylawrence.com/categories/tdd/</link>
    <description>Recent content in Tdd on Tony Lawrence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tonyklawrence&#34;&gt;Tony Lawrence&lt;/a&gt; 2017 - Waffly Bollocks</copyright>
    <lastBuildDate>Wed, 15 Aug 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://tonylawrence.com/categories/tdd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Grouping collections in Java</title>
      <link>http://tonylawrence.com/post/java/grouping-collections/</link>
      <pubDate>Wed, 15 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/grouping-collections/</guid>
      <description>Recently I came across some code that was iterating over collections in order to group them by certain fields. This code was repeated a few times as it was grouping more than once. To me this seemed very verbose and a little hard to understand. As Guava was the available library and one that does not include any grouping I decided to have a go myself.
The iterative approach Map&amp;lt;Character, List&amp;lt;String&amp;gt;&amp;gt; group = newHashMap(); List&amp;lt;String&amp;gt; strings = asList(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;); for (String string : strings) { Character firstCharacter = string.</description>
    </item>
    
  </channel>
</rss>