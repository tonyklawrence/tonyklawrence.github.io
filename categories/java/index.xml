<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Tony Lawrence</title>
    <link>http://tonylawrence.com/categories/java/</link>
    <description>Recent content in Java on Tony Lawrence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tonyklawrence&#34;&gt;Tony Lawrence&lt;/a&gt; 2017 - Waffly Bollocks</copyright>
    <lastBuildDate>Wed, 15 Aug 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://tonylawrence.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Grouping collections in Java</title>
      <link>http://tonylawrence.com/post/java/grouping-collections/</link>
      <pubDate>Wed, 15 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/grouping-collections/</guid>
      <description>Recently I came across some code that was iterating over collections in order to group them by certain fields. This code was repeated a few times as it was grouping more than once. To me this seemed very verbose and a little hard to understand. As Guava was the available library and one that does not include any grouping I decided to have a go myself.
The iterative approach Map&amp;lt;Character, List&amp;lt;String&amp;gt;&amp;gt; group = newHashMap(); List&amp;lt;String&amp;gt; strings = asList(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;); for (String string : strings) { Character firstCharacter = string.</description>
    </item>
    
    <item>
      <title>Fluent Guava</title>
      <link>http://tonylawrence.com/post/java/fluent-guava/</link>
      <pubDate>Thu, 31 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/fluent-guava/</guid>
      <description>It&amp;rsquo;s been far too long since I&amp;rsquo;ve written anything on this site. I&amp;rsquo;ve got plenty of topics, it&amp;rsquo;s just finding the time to write something down. This one comes from a comment on one of my previous posts about Guava and Modern Java.
Guava has recently been upgraded to version 12 and along with this release comes the idea of a Fluent Interface as described by Martin Fowler and Eric Evans.</description>
    </item>
    
    <item>
      <title>Lambda Magic?</title>
      <link>http://tonylawrence.com/post/java/lambda-magic/</link>
      <pubDate>Tue, 10 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/lambda-magic/</guid>
      <description>I often hear people complain about Java (I’m not excluding myself from this) about how restrictive the language can be compared to others. We all know how noisy it is when working with functional libraries. Wouldn’t it be great if we had a lambda style syntax in Java?
This is where Enumerable for Java comes in. This has been developed by Håkan Råberg who describes the library as:
 &amp;ldquo;Ruby/Smalltalk style internal iterators for Java 5 using bytecode transformation to capture expressions as closures.</description>
    </item>
    
    <item>
      <title>Modern Java - The Totally Lazy Way</title>
      <link>http://tonylawrence.com/post/java/the-totally-lazy-way/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/the-totally-lazy-way/</guid>
      <description>A few weeks ago I blogged about Modern Java using Googles Guava to write functional programs. One of the comments on that blog was by a good friend on mine Franck Rasolo. He suggested I took a look at Totally Lazy by Daniel Bodart as an alternative to Guava. So I decided to implement the same functional calculator I wrote in the previous post using totally lazy instead and here are my findings.</description>
    </item>
    
    <item>
      <title>Modern Java</title>
      <link>http://tonylawrence.com/post/java/modern-java/</link>
      <pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/modern-java/</guid>
      <description>I recently attended XPDay London 2011 organised by the great eXtreme Tuesday Club and had a great 2 days. Many of the talks I went to were more exploratory than anything but sometimes it’s a great way to learn more. One of the early sessions was hosted by Julian Kelsey @scrawlings and Andrew Parker @aparker42 and was predominately about refactoring Java into a more function style, and another by Nat Pryce @natpryce about test driving function programming which in the end turned into something called Modern Java.</description>
    </item>
    
  </channel>
</rss>