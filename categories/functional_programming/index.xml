<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional_programming on Tony Lawrence</title>
    <link>http://tonylawrence.com/categories/functional_programming/index.xml</link>
    <description>Recent content in Functional_programming on Tony Lawrence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tonyklawrence&#34;&gt;Tony Lawrence&lt;/a&gt; 2017 - Waffly Bollocks</copyright>
    <atom:link href="http://tonylawrence.com/categories/functional_programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Configuring your Haskell environment</title>
      <link>http://tonylawrence.com/post/haskell/configure/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/haskell/configure/</guid>
      <description>

&lt;p&gt;My love of functional programming has been getting stronger over the past year so I decided to attend &lt;a href=&#34;http://www.well-typed.com/&#34;&gt;Well-Typed&lt;/a&gt; Haskell courses at Skills Matters&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:wt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:wt&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.  As I&amp;rsquo;m a huge fan of JetBrains &lt;a href=&#34;http://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt; IDE I found using Haskell a little lacking in this area (unless you can be online with &lt;a href=&#34;http://www.fpcomplete.com/&#34;&gt;FP Complete&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;In this article I will explain how I configured my Haskell development environment using Sublime Text 3 and a few extras.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;installing-haskell-via-homebrew-brew&#34;&gt;Installing Haskell (via Homebrew&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:brew&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:brew&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;)&lt;/h2&gt;

&lt;p&gt;If you need to, take a look at my post on how to &lt;a href=&#34;http://tonylawrence.com/2013/12/31/installing-homebrew-on-osx-mavericks/&#34;&gt;Install Homebrew&lt;/a&gt;.  It&amp;rsquo;s not actually very hard at all.&lt;/p&gt;

&lt;p&gt;Once you have Homebrew up and running it&amp;rsquo;s very simple to install Haskell (although it might take a while to complete.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install haskell-platform
==&amp;gt; Installing dependencies for haskell-platform: apple-gcc42,,ghc
==&amp;gt; Installing haskell-platform dependency: apple-gcc42
==&amp;gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/apple-gcc42
######################################################################## 100.0%
==&amp;gt; Pouring apple-gcc42-4.2.1-5666.3.mavericks.bottle.2.tar.gz
==&amp;gt; Summary
  /usr/local/Cellar/apple-gcc42/4.2.1-5666.3: 104 files, 75M
==&amp;gt; Installing haskell-platform dependency: ghc
==&amp;gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/ghc-7.6.3.m
######################################################################## 100.0%
==&amp;gt; Pouring ghc-7.6.3.mavericks.bottle.2.tar.gz
==&amp;gt; Caveats
This brew is for GHC only; you might also be interested in haskell-platform.
==&amp;gt; Summary
  /usr/local/Cellar/ghc/7.6.3: 5286 files, 776M
==&amp;gt; Installing haskell-platform
==&amp;gt; Downloading http://lambda.haskell.org/platform/download/2013.2.0.0/haskell-p
######################################################################## 100.0%
==&amp;gt; ./configure --prefix=/usr/local/Cellar/haskell-platform/2013.2.0.0
==&amp;gt; make install
==&amp;gt; Caveats
Run `cabal update` to initialize the package list.

If you are replacing a previous version of haskell-platform, you may want 
to unregister packages belonging to the old version. You can find broken
packages using:
  ghc-pkg check --simple-output
You can uninstall them using:
  ghc-pkg check --simple-output | xargs -n 1 ghc-pkg unregister --force
==&amp;gt; Summary
  /usr/local/Cellar/haskell-platform/2013.2.0.0: 1463 files, 232M, built in 24.5 minutes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As requested I also run &lt;code&gt;cabal update&lt;/code&gt; to initialise the package list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cabal update
Config file path source is default config file.
Config file /Users/tony/.cabal/config not found.
Writing default configuration to /Users/tony/.cabal/config
Downloading the latest package list from hackage.haskell.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then check that it&amp;rsquo;s all working correctly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ghci
GHCi, version 7.6.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude&amp;gt; 2+2
4
Prelude&amp;gt; :t 4
4 :: Num a =&amp;gt; a
Prelude&amp;gt; 
Leaving GHCi.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-sublime-text-3&#34;&gt;Installing Sublime Text 3&lt;/h2&gt;

&lt;p&gt;Sublime Text 3 is currently still in beta.  I have been using it for a while and have not come across any problems which is why I can highly recommend giving it a go.  It can be downloaded from &lt;a href=&#34;http://www.sublimetext.com/3&#34;&gt;http://www.sublimetext.com/3&lt;/a&gt;.  Once downloaded, open the DMG file and copy to your Applications folder.  On starting you will be greeted with the following:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/haskell/sublime-text-3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;If you like sublime please purchase a license to allow the developers to keep supporting this great application&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:buy&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:buy&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configuring-sublime-text-for-haskell&#34;&gt;Configuring Sublime Text for Haskell&lt;/h2&gt;

&lt;p&gt;To allow us to fully use the power of Sublime Text we need to install Package Control.  This will allow us to use the Haskell package later.  Full instructions on installation can be found on the &lt;a href=&#34;http://sublime.wbond.net/installation&#34;&gt;Package Control Site&lt;/a&gt;.  A quick overview follows.&lt;/p&gt;

&lt;h3 id=&#34;installing-the-package-control&#34;&gt;Installing the Package Control&lt;/h3&gt;

&lt;p&gt;Whilst in Sublime Text type &lt;code&gt;ctrl+`&lt;/code&gt; to open up the console and paste the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output in the console will probably look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;reloading plugin Package Control.Package Control
found 2 files for base name Main.sublime-menu
Package Control: No updated packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want to trust the script you can follow the manual instructions on the package control website.&lt;/p&gt;

&lt;h3 id=&#34;installing-sublimehaskell-package&#34;&gt;Installing SublimeHaskell Package&lt;/h3&gt;

&lt;p&gt;SublimeHaskell&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sublimehaskell&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:sublimehaskell&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; is a github hosted project which adds support for many things.  I mainly use it to auto-compile the edited file on save and easily running a Haskell program from the editor.  Full instructions are available at the &lt;a href=&#34;http://github.com/SublimeHaskell/SublimeHaskell&#34;&gt;SublimeHaskell&lt;/a&gt; project site.  Below I will show how I got everything working.&lt;/p&gt;

&lt;p&gt;There are a few packages that need to be installed for this package to work.  Using &lt;code&gt;cabal&lt;/code&gt; makes this easy (although it might take a while.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cabal install aeson haskell-src-exts haddock hdevtools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, to install the package in Sublime Text 3 you can type &lt;code&gt;cmd-shift-P&lt;/code&gt; to open up the search window.  Type in &lt;code&gt;install&lt;/code&gt; to locate the install package option and select it.  You should see  in the status bar that it is going to the repository to find available packages.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/haskell/install-package.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Next type in &lt;code&gt;haskell&lt;/code&gt; to locate the SublimeHaskell package and select it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/haskell/install-sublimehaskell.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The status bar should indicate that it is installing the package and when it is completed.  Lastly we need to configure the package to use hdevtools as this isn&amp;rsquo;t the default behaviour.&lt;/p&gt;

&lt;p&gt;From the menu choose &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Package Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;SublimeHaskell&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings - User&lt;/code&gt; to open up the user settings.  Now paste the following into that file and save making sure you replace &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with your username.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;enable_ghc_mod&amp;quot;: false,
  &amp;quot;enable_hdevtools&amp;quot;: true,
  &amp;quot;add_to_PATH&amp;quot;: [ &amp;quot;/Users/&amp;lt;username&amp;gt;/.cabal/bin&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A restart is then required.&lt;/p&gt;

&lt;p&gt;You can now enter your Haskell code into Sublime Text, make sure you have the Haskell build system selected and then type &lt;code&gt;cmd-B&lt;/code&gt; to save, build and execute the code!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://tonylawrence.com/images/haskell/haskell-program.png&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:wt&#34;&gt;&lt;a href=&#34;http://skillsmatter.com/course/scala/well-typed-advanced-haskell&#34;&gt;Well-Typed Advanced Haskell by Andres Löh&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:wt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:brew&#34;&gt;&lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:brew&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:buy&#34;&gt;&lt;a href=&#34;https://www.sublimetext.com/buy&#34;&gt;Support Sublime Text&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:buy&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sublimehaskell&#34;&gt;&lt;a href=&#34;http://github.com/SublimeHaskell/SublimeHaskell&#34;&gt;SublimeHaskell GitHub hosted project&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sublimehaskell&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Grouping collections in Java</title>
      <link>http://tonylawrence.com/post/java/grouping-collections/</link>
      <pubDate>Wed, 15 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/grouping-collections/</guid>
      <description>

&lt;p&gt;Recently I came across some code that was iterating over collections in order to group them by certain fields.  This code was repeated a few times as it was grouping more than once.  To me this seemed very verbose and a little hard to understand.  As Guava was the available library and one that does not include any grouping I decided to have a go myself.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;the-iterative-approach&#34;&gt;The iterative approach&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Map&amp;lt;Character, List&amp;lt;String&amp;gt;&amp;gt; group = newHashMap();
List&amp;lt;String&amp;gt; strings = asList(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;);

for (String string : strings) {
    Character firstCharacter = string.charAt(0);
    
    if (group.containsKey(firstCharacter)) {
        group.get(firstCharacter).add(string);
    } else {
        group.put(firstCharacter, asList(string));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-idea&#34;&gt;The idea&lt;/h2&gt;

&lt;p&gt;Some functional languages do allow you to group items based upon a field such as the group by in Scala.  Here&amp;rsquo;s a quick example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;val strings = &amp;quot;one&amp;quot; :: &amp;quot;two&amp;quot; :: &amp;quot;three&amp;quot; :: Nil
val groups = strings groupBy (_.charAt(0))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-specification&#34;&gt;The specification&lt;/h2&gt;

&lt;p&gt;To design the grouping I drove this from how I wanted to use it.  The simplest way to do this is from a test.  This allows me to flesh out the design as well as prove it works (and also to know when I am done.)  Simple JUnit tests will suffice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m using enumerable-java to reduce noise in my Java code (see &lt;a href=&#34;http://tonylawrence.com/2012/01/10/lambda-magic/&#34;&gt;Lambda Magic?&lt;/a&gt;) along with this λ trick for Guava&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@NewLambda
private static &amp;lt;F, T&amp;gt; Function&amp;lt;F, T&amp;gt; λ(F from, T to) {
    throw new LambdaWeavingNotEnabledException();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a method named &lt;code&gt;λ&lt;/code&gt; which can be used as a lambda function with guava as the default enumerable implementation returns a &lt;code&gt;Callable&lt;/code&gt; for &lt;a href=&#34;https://github.com/bodar/totallylazy&#34;&gt;Totally Lazy&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-test&#34;&gt;The Test&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Test
public void groupAListOfStrings_byTheirFirstLetter() {
    List&amp;lt;String&amp;gt; strings = asList(&amp;quot;apples&amp;quot;, &amp;quot;apricots&amp;quot;, &amp;quot;oranges&amp;quot;);

    Map&amp;lt;Character, Collection&amp;lt;String&amp;gt;&amp;gt; grouping = group(strings, λ(s, s.charAt(0));

    assertThat(grouping.size(), is(2));
    assertThat(grouping.keySet(), contains(&#39;a&#39;, &#39;o&#39;));
    assertThat(grouping.get(&#39;a&#39;), contains(&amp;quot;apples&amp;quot;, &amp;quot;apricots&amp;quot;));
    assertThat(grouping.get(&#39;o&#39;), contains(&amp;quot;oranges&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s pretty obvious to see that we are grouping these strings by their first letter, &lt;code&gt;a&lt;/code&gt; for apples and apricots, &lt;code&gt;o&lt;/code&gt; for oranges.  We have a number of assertions to make sure that the group is how we expected.&lt;/p&gt;

&lt;h2 id=&#34;the-implementation&#34;&gt;The implementation&lt;/h2&gt;

&lt;p&gt;Now we have our specification we can start to implement the function.  Our test has already given us our signature.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Map&amp;lt;Character, Collection&amp;lt;String&amp;gt;&amp;gt; group(Collection&amp;lt;String&amp;gt; strings, Function&amp;lt;Character, String&amp;gt; function);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can simply iterate over the given list, applying the given function and placing them in the result (using Guava&amp;rsquo;s &lt;a href=&#34;http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ListMultimap.html&#34;&gt;ListMultimap&lt;/a&gt; for ease.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ListMultimap&amp;lt;Character, String&amp;gt; groups = ArrayListMultimap.create();

for (String string : string)
    groups.put(function.apply(string), string);

return groups.asMap();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, we have a simple function that can group our list of strings by their first character.  Unfortunately this isn&amp;rsquo;t very generic and if we wanted a different type of grouping this would not work.  Let&amp;rsquo;s try another test to help us make this more usable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static Person Rod = aPerson(&amp;quot;Rod&amp;quot;, 50);
private static Person Jane = aPerson(&amp;quot;Jane&amp;quot;, 21);
private static Person Freddy = aPerson(&amp;quot;Freddy&amp;quot;, 50);

@Test
public void groupPeople_byAge() {
    List&amp;lt;Person&amp;gt; people = asList(Rod, Jane, Freddy);

    Map&amp;lt;Integer, Collection&amp;lt;Person&amp;gt;&amp;gt; groups = group(people, λ(p, p.age()));

    assertThat(groups.size(), is(2));
    assertThat(groups.keySet(), contains(21, 50));
    assertThat(groups.get(21), contains(Jane));
    assertThat(groups.get(50), contains(Rod, Freddy));
}

class Person {
    public static Person aPerson(String name, Integer age) {
        return new Person(name, age);
    }

    private Person(String name, Integer age) {
        this.name = name,
        this.age = age;
    }

    public Integer age() { return age };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need a generic signature for our group function.  Here&amp;rsquo;s what I came up with.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;lt;Group, Item&amp;gt; Map&amp;lt;Group, Collection&amp;lt;Item&amp;gt;&amp;gt; group(Collection&amp;lt;Item&amp;gt; items, Function&amp;lt;Item, Group&amp;gt; grouping);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a shame that trying to make this readable makes a huge long signature.  I admit I could have just used &lt;code&gt;G&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt; instead of &lt;code&gt;Group&lt;/code&gt; and &lt;code&gt;Item&lt;/code&gt; however I do feel this explains the usage more.&lt;/p&gt;

&lt;p&gt;Also, I was quite pleased at how close my Java implementation came out to the original Scala.  It wasn&amp;rsquo;t the intention, I just wanted to make it readable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Group a list of strings by their first character in Java&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;group(strings, λ(s, s.charAt(0));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Group a list of string by their first character in Scala&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;strings groupBy (_.charAt(0))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I found the group function very useful, especially when creating reports.  I do realise that I wanted to remove iteration/duplication and the new &lt;code&gt;group()&lt;/code&gt; function iterates, maybe this could be further improved with tail recursion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fluent Guava</title>
      <link>http://tonylawrence.com/post/java/fluent-guava/</link>
      <pubDate>Thu, 31 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/fluent-guava/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been far too long since I&amp;rsquo;ve written anything on this site.  I&amp;rsquo;ve got plenty of topics, it&amp;rsquo;s just finding the time to write something down.  This one comes from a comment on one of my previous posts about Guava and &lt;a href=&#34;http://tonylawrence.com/post/java/modern-java/&#34;&gt;Modern Java&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Guava has recently been upgraded to version 12 and along with this release comes the idea of a &lt;a href=&#34;http://martinfowler.com/bliki/FluentInterface.html&#34;&gt;Fluent Interface&lt;/a&gt; as described by Martin Fowler and Eric Evans.  This might bring it more in line with TotallyLazy and the reason I took to the library so quickly.  I hope to introduce to you the &lt;code&gt;FluentIterable&lt;/code&gt; class and show how it can improve your Java.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The first thing you&amp;rsquo;ll notice is that like TotallyLazy we have to convert our dull Java collections into the rich collection offered by the fluent interface.  This is a simple step using the &lt;code&gt;from&lt;/code&gt; class method on the interface itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static java.util.Arrays.asList;
import static com.google.common.collect.FluentIterable.from;

List&amp;lt;Integer&amp;gt; javaList = asList(1, 2, 3, 4, 5);
FluentIterable&amp;lt;Integer&amp;gt; richList = from(javaList);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have all the power in the &lt;code&gt;richList&lt;/code&gt;.  But once again, if we need to return normal Java lists we have to convert back again.  Note: The list returned from Guava will be immutable so you can&amp;rsquo;t go changing it afterwards (a good thing imho).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; javaList = richList.toImmutableList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we know how to get hold of a collection using the fluent interface what can we do with it?  Well pretty much all the things we could do with Guava functions/predicates before only this time the language should read more fluently.  Let&amp;rsquo;s take a look at an example using both the fluent interface and the old style.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; numberList = asList(1, 2, 3, 4, 5);

transform(numberList, byHalf()); // old style
        
FluentIterable numbers = from(numberList); // fluent interface
numbers.transform(byHalf());

// assume byHalf() returns us a Guava Function&amp;lt;Integer,Integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;re thinking that the fluent interface takes more code.  And in this simple example it does because we need to enrich the standard java list.  Let&amp;rsquo;s go for a few more examples of different operations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; onlyEvens = numbers.filter(byEvenNumbers());
List&amp;lt;Integer&amp;gt; bigNumbers = numbers.filter(bigValues());
List&amp;lt;Integer&amp;gt; smallSet = numbers.limit(5);
boolean hasLargeOnes = numbers.anyMatch(bigValues());

// one of my favourites as I always find it missing
List&amp;lt;Integer&amp;gt; first = numbers.first();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For me this reads better and the transformation operation is now on the object concerned instead of some global method somewhere inside Guava.  Lets take my previous example from Guava and TotallyLazy and compare them with the fluent interface.&lt;/p&gt;

&lt;h3 id=&#34;guava&#34;&gt;Guava&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
    List&amp;lt;Integer&amp;gt; evenNumbers = transform(input, intoEvenNumber());
    List&amp;lt;Integer&amp;gt; halvedIfMultipleOfFour = transform(evenNumbers, halfIfMultipleOfFour());
    return transform(halvedIfMultipleOfFour, addThreeIfContainsNumberTwo());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;totally-lazy&#34;&gt;Totally Lazy&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private Sequence&amp;lt;Integer&amp;gt; calculate(Sequence&amp;lt;Integer&amp;gt; input) {
    return input
        .map(intoEvenNumber())
        .map(halfIfMultipleOfFour())
        .map(addThreeIfContainsNumberTwo());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;guava-fluent-interface&#34;&gt;Guava Fluent Interface&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private FluentIterable&amp;lt;Integer&amp;gt; calculate(FluentIterable&amp;lt;Integer&amp;gt; input) {
    return input
        .transform(intoEvenNumber())
        .transform(halfIfMultipleOfFour())
        .transform(addThreeIfContainsNumberTwo());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not bad and very similar to the TotallyLazy example.
We have a fluent syntax which we can replace all our old guava code with.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So for me Guava has finally the beginning of an expressive language that allows us to apply functions to our collections.  I&amp;rsquo;m sure there&amp;rsquo;s more to come but this for me is a good start and means that on projects that use Guava I can hope to improve the readability of some of the code.&lt;/p&gt;

&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.guava-libraries.googlecode.com/git-history/v12.0/javadoc/index.html&#34;&gt;Guava FluentIterable JavaDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tonyklawrence/blog-posts/tree/master/fluent-guava&#34;&gt;Example Project on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Lambda Magic?</title>
      <link>http://tonylawrence.com/post/java/lambda-magic/</link>
      <pubDate>Tue, 10 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/lambda-magic/</guid>
      <description>

&lt;p&gt;I often hear people complain about Java (I’m not excluding myself from this) about how restrictive the language can be compared to others.  We all know how noisy it is when working with functional libraries.  Wouldn’t it be great if we had a lambda style syntax in Java?&lt;/p&gt;

&lt;p&gt;This is where &lt;a href=&#34;https://github.com/hraberg/enumerable&#34;&gt;Enumerable&lt;/a&gt; for Java comes in.  This has been developed by &lt;a href=&#34;http://ghettojedi.org/&#34;&gt;Håkan Råberg&lt;/a&gt; who describes the library as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Ruby/Smalltalk style internal iterators for Java 5 using bytecode transformation to capture expressions as closures.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;What does that mean?  Using post processing (either during runtime or post compilation using (&lt;a href=&#34;http://asm.ow2.org/&#34;&gt;ASM&lt;/a&gt;) we can write a simple single expression lambda (or closure) directly in our Java code.&lt;/p&gt;

&lt;h3 id=&#34;the-example&#34;&gt;The Example&lt;/h3&gt;

&lt;p&gt;As before we start off with a sequence of numbers.  Imagine we want to increment each value by 5.  A simple operation solved in an imperative manner would be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; addFiveToEach(List&amp;lt;Integer&amp;gt; numbers) {
    List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;Integer&amp;gt;();
    for (Integer number : numbers) {
        result.add(number + 5);
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can’t really complain about the code above, nice and simple, but let’s see what we can improve on with enumerable java.&lt;/p&gt;

&lt;h3 id=&#34;with-totallylazy&#34;&gt;With TotallyLazy&lt;/h3&gt;

&lt;p&gt;Let me start with my new favourite TotallyLazy.  Using enumerable we can now embed a simple lamba expression right into the transformation of the number sequence (using the λ symbol.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Sequence&amp;lt;Integer&amp;gt; addFiveToEach(Sequence&amp;lt;Integer&amp;gt; numbers) {
    return numbers.map(λ(i, i + 5));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Amazingly this compiles directly in IntelliJ without any messing about with settings, all you need is TotallyLazy and enumerable libraries in the project.  How can this be?  Well, with a couple of static imports of course!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static com.googlecode.totallylazy.lambda.Lambdas.λ;
import static org.enumerable.lambda.Parameters.i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This first one includes the lambda symbol into the namespace and the other includes a variable named &lt;code&gt;i&lt;/code&gt; of type &lt;code&gt;int&lt;/code&gt;.  There are other options for different types such as &lt;code&gt;s&lt;/code&gt; for &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; for &lt;code&gt;Char&lt;/code&gt; but I’ll let you have the fun finding them all out.&lt;/p&gt;

&lt;p&gt;Here’s an example of determining the length every string in the sequence (interestingly the input and output types do not have to be the same):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Sequence&amp;lt;Integer&amp;gt; lengthOfEach(Sequence&amp;lt;String&amp;gt; strings){
    return strings.map(λ(s, s.length()));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-caveat&#34;&gt;The caveat&lt;/h3&gt;

&lt;p&gt;There is one gotcha in this.  Because this uses byte code manipulation to convert our lambda into an anonymous function for TotallyLazy, we have to execute the code using a javaagent argument such as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -javaagent:enumerable-java-&amp;lt;version&amp;gt;.jar [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(or we could post process out classes to remove the runtime dependency - please refer to the libraries documentation on this &lt;a href=&#34;https://github.com/hraberg/enumerable#readme&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;with-guava&#34;&gt;With Guava&lt;/h3&gt;

&lt;p&gt;Like some of my projects, you may be using Guava and do not want to switch over to TotallyLazy.  Luckily the author has allowed for this by offering a support class that will transform functions making them suitable for guava.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static org.enumerable.lambda.support.googlecollect.LambdaGoogleCollections.function;

private List&amp;lt;Integer&amp;gt; addFiveToEach(List&amp;lt;Integer&amp;gt; numbers) {
    return transform(numbers, function(i, i + 5));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works in exactly the same way (and requires javaagent) but transforms the function code into an anonymous Guava function.  Still, for simple transformations the syntax is pretty tidy.  Support for predicates and suppliers are also in there.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I really like this idea but I have yet to really use it for any real code.  Two small things are holding me back.  Firstly is that it’s not nice running a server with the extra javaagent to manipulate the code.  Post processing during the build would be the better option but it still feels a little dirty.  Secondly, I rarely need transformations this simple, and when adding more complicated code I would also extract it out for testability and reducing noise, thus negating the need for inline lambdas.&lt;/p&gt;

&lt;p&gt;I still think it’s pretty cool and a great way of extending the life of Java.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modern Java - The Totally Lazy Way</title>
      <link>http://tonylawrence.com/post/java/the-totally-lazy-way/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/the-totally-lazy-way/</guid>
      <description>

&lt;p&gt;A few weeks ago I blogged about &lt;a href=&#34;http://tonylawrence.com/post/java/modern-java/&#34;&gt;Modern Java&lt;/a&gt; using Googles Guava to write functional programs. One of the comments on that blog was by a good friend on mine Franck Rasolo. He suggested I took a look at &lt;a href=&#34;https://github.com/bodar/totallylazy&#34;&gt;Totally Lazy&lt;/a&gt; by &lt;a href=&#34;http://dan.bodar.com&#34;&gt;Daniel Bodart&lt;/a&gt; as an alternative to Guava. So I decided to implement the same functional calculator I wrote in the previous post using totally lazy instead and here are my findings.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;how-does-totallylazy-compare-to-guava&#34;&gt;How does TotallyLazy compare to Guava?&lt;/h3&gt;

&lt;p&gt;Assuming we have a list of numbers defined:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; numbers = asList(2, 4, 6, 8, 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;guava&#34;&gt;Guava&lt;/h4&gt;

&lt;p&gt;Imagine we want to halve each of the values, using the Guava API we can transform the values simply with an anonymous implementation of the &lt;code&gt;Function&amp;lt;F, T&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;transform(numbers, new Function&amp;lt;Integer, Integer&amp;gt;() {
    public Integer apply(Integer from) {
        return from / 2;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously this isn&amp;rsquo;t very pretty but we can hide this away in a named implementation with a suitably named factory method to give us something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;transform(numbers, intoHalfTheirValue());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t go into detail here on how you can write a named function with a descriptive factory method but please check out the previous post if you&amp;rsquo;d like to know this.&lt;/p&gt;

&lt;p&gt;As you can see the Guava solution is simple, neat and very easy to understand. So how can Totally Lazy improve on this?&lt;/p&gt;

&lt;h4 id=&#34;totally-lazy&#34;&gt;Totally Lazy&lt;/h4&gt;

&lt;p&gt;One of the first changes when using Totally Lazy is that we no longer work with standard Java &lt;code&gt;Lists&lt;/code&gt;, but with &lt;code&gt;Sequences&lt;/code&gt;. This might sound like a bad thing to you but using a sequence offers us a more natural functional style to the code, and it&amp;rsquo;s also very easy to convert from a &lt;code&gt;List&lt;/code&gt; into a &lt;code&gt;Sequence&lt;/code&gt; and back.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Sequence&amp;lt;Integer&amp;gt; sequence = sequence(numbers);
List&amp;lt;Integer&amp;gt; list = sequence.toList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this sequence we can now map our numbers into new numbers in a similar way to Guava however instead of implementing the &lt;code&gt;Function&lt;/code&gt; interface we now implement Totally Lazy&amp;rsquo;s &lt;code&gt;Callable1&amp;lt;Input, Output&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;sequence.map(new Callable1&amp;lt;Integer, Integer&amp;gt;() {
    public Integer call(Integer from) throws Exception {
        return from / 2;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And showing a cleaner call with a factory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;sequence.map(intoHalfTheirValue());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you&amp;rsquo;ll have noticed that the implementation of &lt;code&gt;Function&amp;lt;T, F&amp;gt;&lt;/code&gt; and &lt;code&gt;Callable1&amp;lt;Input, Output&amp;gt;&lt;/code&gt; are almost identical, only the method name differs from &lt;code&gt;apply()&lt;/code&gt; to &lt;code&gt;call()&lt;/code&gt;.  The main benefit of using the &lt;code&gt;Sequence&lt;/code&gt; api is that we can now use method chaining (and lambdas which I&amp;rsquo;ll describe in a following post.)&lt;/p&gt;

&lt;p&gt;So to conclude with a Totally Lazy implementation of the functional calculator from the previous post showing method chaining&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TotallyLazyFunctionalCalculator implements Calculator {

    public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
        return calculate(sequence(input)).toList();
    }
    
    private Sequence&amp;lt;Integer&amp;gt; calculate(Sequence&amp;lt;Integer&amp;gt; input) {
        return input
            .map(intoEvenNumber())
            .map(halfIfMultipleOfFour())
            .map(addThreeIfContainsNumberTwo());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think going forward I will be using Totally Lazy over Guava as it feels more natural, nesting transforms in Guava is a little noisy.&lt;/p&gt;

&lt;p&gt;In my next post I&amp;rsquo;ll talk about using &lt;a href=&#34;https://github.com/hraberg/enumerable&#34;&gt;Enumerable Java&lt;/a&gt; to allow us to use lambda expressions directly in Java.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modern Java</title>
      <link>http://tonylawrence.com/post/java/modern-java/</link>
      <pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tonylawrence.com/post/java/modern-java/</guid>
      <description>

&lt;p&gt;I recently attended XPDay London 2011 organised by the great eXtreme Tuesday Club and had a great 2 days.  Many of the talks I went to were more exploratory than anything but sometimes it’s a great way to learn more.  One of the early sessions was hosted by Julian Kelsey &lt;a href=&#34;http://www.twitter.com/scrawlings&#34;&gt;@scrawlings&lt;/a&gt; and Andrew Parker &lt;a href=&#34;http://www.twitter.com/aparker42&#34;&gt;@aparker42&lt;/a&gt; and was predominately about refactoring Java into a more function style, and another by Nat Pryce &lt;a href=&#34;http://www.twitter.com/natpryce&#34;&gt;@natpryce&lt;/a&gt; about test driving function programming which in the end turned into something called Modern Java.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;From what I understood Modern Java was about taking a functional approach to programming and utilising libraries such as Googles Guava to produce simpler, immutable, easily tested and less coupled software (albeit at a risk of noise due to the java language.)&lt;/p&gt;

&lt;h3 id=&#34;why-would-you-want-to-do-this-you-might-ask&#34;&gt;Why would you want to do this you might ask?&lt;/h3&gt;

&lt;p&gt;Well, I’ve been working with these libraries for a few years and have realised the potential functional programming offers even to a Java developer.  Recently, I refactored some code with one of my colleagues James Bull and that process gave me the idea to write this post.  I hope to help explain how you can do this and also try to convince you that the end result is a better place to be.&lt;/p&gt;

&lt;p&gt;To do this we are going to need an simple example, we&amp;rsquo;ll need to build a calculator which will do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given a list of numbers&amp;hellip;&lt;/li&gt;
&lt;li&gt;If the number is odd add 1 to make it even&lt;/li&gt;
&lt;li&gt;If the new number becomes a mutliple of 4 then halve it&lt;/li&gt;
&lt;li&gt;If the result contains a 2 then add 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully this is simple enough, but lets go through a few examples (would make good test cases)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given 1, add 1 becomes 2, is not a mutiple of 4, does contain a 2 so add 3, result 5&lt;/li&gt;
&lt;li&gt;Given 4, is even, is multiple of 4 so halve it which becomes 2,  does contains a 2 so add 3, result 5&lt;/li&gt;
&lt;li&gt;Given 7, add 1 becomes 8, is multiple of 4 so halve it which becomes 4, does not contain a 2, result 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;everyday-tdd-approach&#34;&gt;Everyday TDD approach&lt;/h3&gt;

&lt;p&gt;If we are going to take the expected imperative TDD approach we would break the requirements down into doing the simplest thing possible so we might start off with just the first part of the example which will add 1 to odd numbers.  We might start with a test something like this (you might really start with a single number before handling a list but this is an example and don’t want it to get too long.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Test
public void addsOneToEveryOddNumber() {
    List someNumbers = asList(1, 2, 3, 5, 17, 7, 0, 14);
    List expectedNumber = asList(2, 2, 4, 6, 18, 8, 0, 14);
    assertThat(calculator.calculate(someNumbers), is(equalTo(expectedNumber)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the implementation of the calculator to make this pass could be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
    List&amp;lt;Integer&amp;gt; output = new ArrayList&amp;lt;Integer&amp;gt;();

    for (Integer number : input) {
        if (number % 2 != 0) number++;
        output.add(number);
    }

    return output;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, we have a working test and are a third of the way through the requirements.  Next we would go onto the next part, easy.  We add a new test to check if the number is divisible by 4 we divide by 2.&lt;/p&gt;

&lt;p&gt;Now, if we want to use a random set of numbers as input we have to factor in the first calculation (we could just use even numbers but that’s not really a great test.)  And when testing the third case we need to factor in case 1 and 2, this is making our test cases more complicated than we need to.&lt;/p&gt;

&lt;p&gt;Anyway, we could end up with our calculator looking something like this (with a few methods extracted, not included for conciseness.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
    List&amp;lt;Integer&amp;gt; output = new ArrayList&amp;lt;Integer&amp;gt;();

    for (Integer number : input) {
        if (odd(number)) number++;
        if (multipleOfFour(number)) number /= 2;
        if (containsATwo(number)) number += 3;
        output.add(number);
    }

    return output;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, it’s a nice simple, readable piece of code that has been well tested.&lt;/p&gt;

&lt;p&gt;Unfortunately, the test cases are quite complicated due to having to consider all 3 stages of the calculation. You could make these extracted methods public and test them but that’s breaking our encapsulation. If we decided to add a forth, we would have to change all the other tests which is not ideal.&lt;/p&gt;

&lt;h3 id=&#34;so-how-can-a-functional-approach-help-us&#34;&gt;So how can a functional approach help us?&lt;/h3&gt;

&lt;p&gt;Using a library such as &lt;a href=&#34;https://github.com/google/guava&#34;&gt;Guava&lt;/a&gt; which offers us a small amount of power of functional programming, allowing us to transform, filter and find objects in lists. The guava function interface used by transform is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Function {
    T apply(@javax.annotation.Nullable F f);
    boolean equals(@javax.annotation.Nullable java.lang.Object o);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By implementing the apply method we can transform the input into the required output (not required to be of the same type.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Integer apply(Integer number) {
    return number % 2 == 0 ? number : number + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach enables us to extract out each of our separate concerns into individual classes and test them alone. So starting at the beginning we would start with the first case of making all numbers even.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Test
public void oddNumbersArePromotedToNextEvenNumber() {
    assertThat(function.apply(27), is(28));
    assertThat(function.apply(4), is(4));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way we end up with 3 functions, each doing one thing and nice simple tests. But how do we connect them together to form the calculator? We just transform the input using the new functions we’ve written (using a factory method to help reduce noise of new.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Integer&amp;gt; calculate(List&amp;lt;Integer&amp;gt; input) {
    List&amp;lt;Integer&amp;gt; evenNumbers = transform(input, intoEvenNumber());
    List&amp;lt;Integer&amp;gt; halvedIfMultipleOfFour = transform(evenNumbers, halfIfMultipleOfFour());
    return transform(halvedIfMultipleOfFour, addThreeIfContainsNumberTwo());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then have a simple test for the calculator that given a set of input we get the right output, we no longer need to test all the different edge cases, each of the processes. Adding a new condition is as simple as writing the function for it, updating the calculator test with the new output and add the transformation to the code.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve included the full class definition of one of the functions in case you&amp;rsquo;d like to try this yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.google.common.base.Function;

public class HalfIfMultipleOfFour implements Function&amp;lt;Integer, Integer&amp;gt; {

    public static HalfIfMultipleOfFour halfIfMultipleOfFour() {
        return new HalfIfMultipleOfFour();
    }

    public Integer apply(Integer number) {
        return multipleOfFour(number) ? number / 2 : number;
    }

    private boolean multipleOfFour(Integer number) {
        return number % 4 == 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There have been a lot of information to cover in the post, I realise that I&amp;rsquo;ve been quite brief however I&amp;rsquo;m happy to cover anything in more detail if you leave a comment.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>